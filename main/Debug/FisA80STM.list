
FisA80STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001126c  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017078  08017078  00030024  2**0
                  CONTENTS
  4 .ARM          00000008  08017078  08017078  00027078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017080  08017080  00030024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017080  08017080  00027080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017084  08017084  00027084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08017088  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000024  080170ac  00030024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080170ac  00030134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd81  00000000  00000000  00030054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea7  00000000  00000000  0003fdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00041c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001669c  00000000  00000000  00042a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f6fa  00000000  00000000  00059134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f388  00000000  00000000  0006882e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000f7bb6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d58  00000000  00000000  000f7c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ca4  00000000  00000000  000f8968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005df4 	.word	0x08005df4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08005df4 	.word	0x08005df4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <init>:
static uint16_t LastTimerCounter = 0;
static uint16_t MenuLastTimerCounter = 0;

int door=0;
int door2=0;
void init() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
    ST7735_Init();
 80004d6:	f003 f91b 	bl	8003710 <ST7735_Init>

    const char ready[] = "Ready!\r\n";
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <init+0x2c>)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e0:	c303      	stmia	r3!, {r0, r1}
 80004e2:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 80004e4:	1d39      	adds	r1, r7, #4
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	2208      	movs	r2, #8
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <init+0x30>)
 80004ee:	f005 f922 	bl	8005736 <HAL_UART_Transmit>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	08005e0c 	.word	0x08005e0c
 8000500:	200000ec 	.word	0x200000ec

08000504 <caricon>:
void caricon(uint16_t x, uint16_t y, uint16_t color)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	f5ad 4d81 	sub.w	sp, sp, #16512	; 0x4080
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	4604      	mov	r4, r0
 8000510:	4608      	mov	r0, r1
 8000512:	4611      	mov	r1, r2
 8000514:	f107 0318 	add.w	r3, r7, #24
 8000518:	3b12      	subs	r3, #18
 800051a:	4622      	mov	r2, r4
 800051c:	801a      	strh	r2, [r3, #0]
 800051e:	f107 0318 	add.w	r3, r7, #24
 8000522:	3b14      	subs	r3, #20
 8000524:	4602      	mov	r2, r0
 8000526:	801a      	strh	r2, [r3, #0]
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	3b16      	subs	r3, #22
 800052e:	460a      	mov	r2, r1
 8000530:	801a      	strh	r2, [r3, #0]
	int tab[96][43]={	{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	3b0c      	subs	r3, #12
 8000538:	4618      	mov	r0, r3
 800053a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800053e:	461a      	mov	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f005 fc0d 	bl	8005d60 <memset>
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	3b0c      	subs	r3, #12
 800054c:	2201      	movs	r2, #1
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	3b0c      	subs	r3, #12
 8000556:	2201      	movs	r2, #1
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	3b0c      	subs	r3, #12
 8000560:	2201      	movs	r2, #1
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	3b0c      	subs	r3, #12
 800056a:	2201      	movs	r2, #1
 800056c:	631a      	str	r2, [r3, #48]	; 0x30
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	3b0c      	subs	r3, #12
 8000574:	2201      	movs	r2, #1
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
 8000578:	f107 0318 	add.w	r3, r7, #24
 800057c:	3b0c      	subs	r3, #12
 800057e:	2201      	movs	r2, #1
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	3b0c      	subs	r3, #12
 8000588:	2201      	movs	r2, #1
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	3b0c      	subs	r3, #12
 8000592:	2201      	movs	r2, #1
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	3b0c      	subs	r3, #12
 800059c:	2201      	movs	r2, #1
 800059e:	645a      	str	r2, [r3, #68]	; 0x44
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	3b0c      	subs	r3, #12
 80005a6:	2201      	movs	r2, #1
 80005a8:	649a      	str	r2, [r3, #72]	; 0x48
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	3b0c      	subs	r3, #12
 80005b0:	2201      	movs	r2, #1
 80005b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	3b0c      	subs	r3, #12
 80005ba:	2201      	movs	r2, #1
 80005bc:	651a      	str	r2, [r3, #80]	; 0x50
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	3b0c      	subs	r3, #12
 80005c4:	2201      	movs	r2, #1
 80005c6:	655a      	str	r2, [r3, #84]	; 0x54
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	3b0c      	subs	r3, #12
 80005ce:	2201      	movs	r2, #1
 80005d0:	659a      	str	r2, [r3, #88]	; 0x58
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	3b0c      	subs	r3, #12
 80005d8:	2201      	movs	r2, #1
 80005da:	65da      	str	r2, [r3, #92]	; 0x5c
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	3b0c      	subs	r3, #12
 80005e2:	2201      	movs	r2, #1
 80005e4:	661a      	str	r2, [r3, #96]	; 0x60
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	3b0c      	subs	r3, #12
 80005ec:	2201      	movs	r2, #1
 80005ee:	665a      	str	r2, [r3, #100]	; 0x64
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	3b0c      	subs	r3, #12
 80005f6:	2201      	movs	r2, #1
 80005f8:	669a      	str	r2, [r3, #104]	; 0x68
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	3b0c      	subs	r3, #12
 8000600:	2201      	movs	r2, #1
 8000602:	66da      	str	r2, [r3, #108]	; 0x6c
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	3b0c      	subs	r3, #12
 800060a:	2201      	movs	r2, #1
 800060c:	671a      	str	r2, [r3, #112]	; 0x70
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	3b0c      	subs	r3, #12
 8000614:	2201      	movs	r2, #1
 8000616:	675a      	str	r2, [r3, #116]	; 0x74
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	3b0c      	subs	r3, #12
 800061e:	2201      	movs	r2, #1
 8000620:	679a      	str	r2, [r3, #120]	; 0x78
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	3b0c      	subs	r3, #12
 8000628:	2201      	movs	r2, #1
 800062a:	67da      	str	r2, [r3, #124]	; 0x7c
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	3b0c      	subs	r3, #12
 8000632:	2201      	movs	r2, #1
 8000634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	3b0c      	subs	r3, #12
 800063e:	2201      	movs	r2, #1
 8000640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	3b0c      	subs	r3, #12
 800064a:	2201      	movs	r2, #1
 800064c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000650:	f107 0318 	add.w	r3, r7, #24
 8000654:	3b0c      	subs	r3, #12
 8000656:	2201      	movs	r2, #1
 8000658:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	3b0c      	subs	r3, #12
 8000662:	2201      	movs	r2, #1
 8000664:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	3b0c      	subs	r3, #12
 800066e:	2201      	movs	r2, #1
 8000670:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	3b0c      	subs	r3, #12
 800067a:	2201      	movs	r2, #1
 800067c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000680:	f107 0318 	add.w	r3, r7, #24
 8000684:	3b0c      	subs	r3, #12
 8000686:	2201      	movs	r2, #1
 8000688:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	3b0c      	subs	r3, #12
 8000692:	2201      	movs	r2, #1
 8000694:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	3b0c      	subs	r3, #12
 800069e:	2201      	movs	r2, #1
 80006a0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	3b0c      	subs	r3, #12
 80006aa:	2201      	movs	r2, #1
 80006ac:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	3b0c      	subs	r3, #12
 80006b6:	2201      	movs	r2, #1
 80006b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	3b0c      	subs	r3, #12
 80006c2:	2201      	movs	r2, #1
 80006c4:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	3b0c      	subs	r3, #12
 80006ce:	2201      	movs	r2, #1
 80006d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	3b0c      	subs	r3, #12
 80006da:	2201      	movs	r2, #1
 80006dc:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	3b0c      	subs	r3, #12
 80006e6:	2201      	movs	r2, #1
 80006e8:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	3b0c      	subs	r3, #12
 80006f2:	2201      	movs	r2, #1
 80006f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	3b0c      	subs	r3, #12
 80006fe:	2201      	movs	r2, #1
 8000700:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8000704:	f107 0318 	add.w	r3, r7, #24
 8000708:	3b0c      	subs	r3, #12
 800070a:	2201      	movs	r2, #1
 800070c:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	3b0c      	subs	r3, #12
 8000716:	2201      	movs	r2, #1
 8000718:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	3b0c      	subs	r3, #12
 8000722:	2201      	movs	r2, #1
 8000724:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	3b0c      	subs	r3, #12
 800072e:	2201      	movs	r2, #1
 8000730:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	3b0c      	subs	r3, #12
 800073a:	2201      	movs	r2, #1
 800073c:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	3b0c      	subs	r3, #12
 8000746:	2201      	movs	r2, #1
 8000748:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	3b0c      	subs	r3, #12
 8000752:	2201      	movs	r2, #1
 8000754:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	3b0c      	subs	r3, #12
 800075e:	2201      	movs	r2, #1
 8000760:	f8c3 26b8 	str.w	r2, [r3, #1720]	; 0x6b8
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	3b0c      	subs	r3, #12
 800076a:	2201      	movs	r2, #1
 800076c:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	3b0c      	subs	r3, #12
 8000776:	2201      	movs	r2, #1
 8000778:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	3b0c      	subs	r3, #12
 8000782:	2201      	movs	r2, #1
 8000784:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	3b0c      	subs	r3, #12
 800078e:	2201      	movs	r2, #1
 8000790:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	3b0c      	subs	r3, #12
 800079a:	2201      	movs	r2, #1
 800079c:	f8c3 28b8 	str.w	r2, [r3, #2232]	; 0x8b8
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	3b0c      	subs	r3, #12
 80007a6:	2201      	movs	r2, #1
 80007a8:	f8c3 28bc 	str.w	r2, [r3, #2236]	; 0x8bc
 80007ac:	f107 0318 	add.w	r3, r7, #24
 80007b0:	3b0c      	subs	r3, #12
 80007b2:	2201      	movs	r2, #1
 80007b4:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	3b0c      	subs	r3, #12
 80007be:	2201      	movs	r2, #1
 80007c0:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	3b0c      	subs	r3, #12
 80007ca:	2201      	movs	r2, #1
 80007cc:	f8c3 2a10 	str.w	r2, [r3, #2576]	; 0xa10
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	3b0c      	subs	r3, #12
 80007d6:	2201      	movs	r2, #1
 80007d8:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	3b0c      	subs	r3, #12
 80007e2:	2201      	movs	r2, #1
 80007e4:	f8c3 2abc 	str.w	r2, [r3, #2748]	; 0xabc
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	3b0c      	subs	r3, #12
 80007ee:	2201      	movs	r2, #1
 80007f0:	f8c3 2ac0 	str.w	r2, [r3, #2752]	; 0xac0
 80007f4:	f107 0318 	add.w	r3, r7, #24
 80007f8:	3b0c      	subs	r3, #12
 80007fa:	2201      	movs	r2, #1
 80007fc:	f8c3 2b68 	str.w	r2, [r3, #2920]	; 0xb68
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	3b0c      	subs	r3, #12
 8000806:	2201      	movs	r2, #1
 8000808:	f8c3 2b6c 	str.w	r2, [r3, #2924]	; 0xb6c
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	3b0c      	subs	r3, #12
 8000812:	2201      	movs	r2, #1
 8000814:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	3b0c      	subs	r3, #12
 800081e:	2201      	movs	r2, #1
 8000820:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	3b0c      	subs	r3, #12
 800082a:	2201      	movs	r2, #1
 800082c:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	3b0c      	subs	r3, #12
 8000836:	2201      	movs	r2, #1
 8000838:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	3b0c      	subs	r3, #12
 8000842:	2201      	movs	r2, #1
 8000844:	f8c3 2d6c 	str.w	r2, [r3, #3436]	; 0xd6c
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	3b0c      	subs	r3, #12
 800084e:	2201      	movs	r2, #1
 8000850:	f8c3 2d70 	str.w	r2, [r3, #3440]	; 0xd70
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	3b0c      	subs	r3, #12
 800085a:	2201      	movs	r2, #1
 800085c:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	3b0c      	subs	r3, #12
 8000866:	2201      	movs	r2, #1
 8000868:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	3b0c      	subs	r3, #12
 8000872:	2201      	movs	r2, #1
 8000874:	f8c3 2ec4 	str.w	r2, [r3, #3780]	; 0xec4
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	3b0c      	subs	r3, #12
 800087e:	2201      	movs	r2, #1
 8000880:	f8c3 2ec8 	str.w	r2, [r3, #3784]	; 0xec8
 8000884:	f107 0318 	add.w	r3, r7, #24
 8000888:	3b0c      	subs	r3, #12
 800088a:	2201      	movs	r2, #1
 800088c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	3b0c      	subs	r3, #12
 8000896:	2201      	movs	r2, #1
 8000898:	f8c3 2f74 	str.w	r2, [r3, #3956]	; 0xf74
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	3b0c      	subs	r3, #12
 80008a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a6:	331c      	adds	r3, #28
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	3b0c      	subs	r3, #12
 80008b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80008b6:	2201      	movs	r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	3b0c      	subs	r3, #12
 80008c0:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80008c4:	3308      	adds	r3, #8
 80008c6:	2201      	movs	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	3b0c      	subs	r3, #12
 80008d0:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80008d4:	330c      	adds	r3, #12
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	3b0c      	subs	r3, #12
 80008e0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80008e4:	3314      	adds	r3, #20
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	3b0c      	subs	r3, #12
 80008f0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80008f4:	3318      	adds	r3, #24
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	3b0c      	subs	r3, #12
 8000900:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000904:	3314      	adds	r3, #20
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	3b0c      	subs	r3, #12
 8000910:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000914:	3318      	adds	r3, #24
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	3b0c      	subs	r3, #12
 8000920:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000924:	331c      	adds	r3, #28
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	3b0c      	subs	r3, #12
 8000930:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	3b0c      	subs	r3, #12
 800093e:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8000942:	3304      	adds	r3, #4
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	3b0c      	subs	r3, #12
 800094e:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8000952:	3308      	adds	r3, #8
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	3b0c      	subs	r3, #12
 800095e:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8000962:	330c      	adds	r3, #12
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	3b0c      	subs	r3, #12
 800096e:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8000972:	3310      	adds	r3, #16
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	3b0c      	subs	r3, #12
 800097e:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8000982:	3314      	adds	r3, #20
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	3b0c      	subs	r3, #12
 800098e:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8000992:	3318      	adds	r3, #24
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	3b0c      	subs	r3, #12
 800099e:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 80009a2:	331c      	adds	r3, #28
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	3b0c      	subs	r3, #12
 80009ae:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	3b0c      	subs	r3, #12
 80009bc:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80009c0:	3304      	adds	r3, #4
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	3b0c      	subs	r3, #12
 80009cc:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80009d0:	3308      	adds	r3, #8
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	3b0c      	subs	r3, #12
 80009dc:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80009e0:	330c      	adds	r3, #12
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	3b0c      	subs	r3, #12
 80009ec:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80009f0:	3310      	adds	r3, #16
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	3b0c      	subs	r3, #12
 80009fc:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 8000a00:	3314      	adds	r3, #20
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	3b0c      	subs	r3, #12
 8000a0c:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 8000a10:	3318      	adds	r3, #24
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	3b0c      	subs	r3, #12
 8000a1c:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 8000a20:	331c      	adds	r3, #28
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	3b0c      	subs	r3, #12
 8000a2c:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	3b0c      	subs	r3, #12
 8000a3a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a3e:	3304      	adds	r3, #4
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	3b0c      	subs	r3, #12
 8000a4a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a4e:	3308      	adds	r3, #8
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	3b0c      	subs	r3, #12
 8000a5a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a5e:	330c      	adds	r3, #12
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	3b0c      	subs	r3, #12
 8000a6a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a6e:	3310      	adds	r3, #16
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	3b0c      	subs	r3, #12
 8000a7a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a7e:	3314      	adds	r3, #20
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	3b0c      	subs	r3, #12
 8000a8a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a8e:	3318      	adds	r3, #24
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	3b0c      	subs	r3, #12
 8000a9a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8000a9e:	331c      	adds	r3, #28
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	3b0c      	subs	r3, #12
 8000aaa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	f107 0318 	add.w	r3, r7, #24
 8000ab6:	3b0c      	subs	r3, #12
 8000ab8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8000abc:	3304      	adds	r3, #4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	3b0c      	subs	r3, #12
 8000ac8:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	3b0c      	subs	r3, #12
 8000ad6:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8000ada:	3304      	adds	r3, #4
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	3b0c      	subs	r3, #12
 8000ae6:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8000aea:	3318      	adds	r3, #24
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	3b0c      	subs	r3, #12
 8000af6:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8000afa:	331c      	adds	r3, #28
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	3b0c      	subs	r3, #12
 8000b06:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 8000b0a:	3314      	adds	r3, #20
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	3b0c      	subs	r3, #12
 8000b16:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 8000b1a:	3318      	adds	r3, #24
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	f107 0318 	add.w	r3, r7, #24
 8000b24:	3b0c      	subs	r3, #12
 8000b26:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8000b2a:	330c      	adds	r3, #12
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	3b0c      	subs	r3, #12
 8000b36:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8000b3a:	3310      	adds	r3, #16
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	3b0c      	subs	r3, #12
 8000b46:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8000b4a:	331c      	adds	r3, #28
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	3b0c      	subs	r3, #12
 8000b56:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	3b0c      	subs	r3, #12
 8000b64:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8000b68:	3308      	adds	r3, #8
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	f107 0318 	add.w	r3, r7, #24
 8000b72:	3b0c      	subs	r3, #12
 8000b74:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8000b78:	330c      	adds	r3, #12
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	3b0c      	subs	r3, #12
 8000b84:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8000b88:	3318      	adds	r3, #24
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	3b0c      	subs	r3, #12
 8000b94:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8000b98:	331c      	adds	r3, #28
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	3b0c      	subs	r3, #12
 8000ba4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	3b0c      	subs	r3, #12
 8000bb4:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000bb8:	331c      	adds	r3, #28
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	3b0c      	subs	r3, #12
 8000bc4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	3b0c      	subs	r3, #12
 8000bd4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000bd8:	3308      	adds	r3, #8
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	3b0c      	subs	r3, #12
 8000be4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000be8:	330c      	adds	r3, #12
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	f107 0318 	add.w	r3, r7, #24
 8000bf2:	3b0c      	subs	r3, #12
 8000bf4:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8000bf8:	330c      	adds	r3, #12
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	3b0c      	subs	r3, #12
 8000c04:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8000c08:	3310      	adds	r3, #16
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	3b0c      	subs	r3, #12
 8000c14:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8000c18:	3314      	adds	r3, #20
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	3b0c      	subs	r3, #12
 8000c24:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8000c28:	3318      	adds	r3, #24
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	3b0c      	subs	r3, #12
 8000c34:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8000c38:	3318      	adds	r3, #24
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	f107 0318 	add.w	r3, r7, #24
 8000c42:	3b0c      	subs	r3, #12
 8000c44:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8000c48:	331c      	adds	r3, #28
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	3b0c      	subs	r3, #12
 8000c54:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8000c58:	2201      	movs	r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	3b0c      	subs	r3, #12
 8000c62:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8000c66:	3308      	adds	r3, #8
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	3b0c      	subs	r3, #12
 8000c72:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	3b0c      	subs	r3, #12
 8000c80:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8000c84:	3308      	adds	r3, #8
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	3b0c      	subs	r3, #12
 8000c90:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8000c94:	330c      	adds	r3, #12
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	3b0c      	subs	r3, #12
 8000ca0:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8000ca4:	3318      	adds	r3, #24
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	3b0c      	subs	r3, #12
 8000cb0:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	3b0c      	subs	r3, #12
 8000cc0:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8000cc4:	3314      	adds	r3, #20
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	3b0c      	subs	r3, #12
 8000cd0:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8000cd4:	3318      	adds	r3, #24
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	3b0c      	subs	r3, #12
 8000ce0:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	3b0c      	subs	r3, #12
 8000cf0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000cf4:	3310      	adds	r3, #16
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	3b0c      	subs	r3, #12
 8000d00:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	3b0c      	subs	r3, #12
 8000d0e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8000d12:	3304      	adds	r3, #4
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	3b0c      	subs	r3, #12
 8000d1e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8000d22:	3318      	adds	r3, #24
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	3b0c      	subs	r3, #12
 8000d2e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8000d32:	3314      	adds	r3, #20
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	3b0c      	subs	r3, #12
 8000d3e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8000d42:	3318      	adds	r3, #24
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	3b0c      	subs	r3, #12
 8000d4e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8000d52:	331c      	adds	r3, #28
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	3b0c      	subs	r3, #12
 8000d5e:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	3b0c      	subs	r3, #12
 8000d6c:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000d70:	3304      	adds	r3, #4
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	3b0c      	subs	r3, #12
 8000d7c:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000d80:	3308      	adds	r3, #8
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	3b0c      	subs	r3, #12
 8000d8c:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000d90:	330c      	adds	r3, #12
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	f107 0318 	add.w	r3, r7, #24
 8000d9a:	3b0c      	subs	r3, #12
 8000d9c:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000da0:	3310      	adds	r3, #16
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	3b0c      	subs	r3, #12
 8000dac:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000db0:	3314      	adds	r3, #20
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	3b0c      	subs	r3, #12
 8000dbc:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000dc0:	3318      	adds	r3, #24
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	3b0c      	subs	r3, #12
 8000dcc:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8000dd0:	331c      	adds	r3, #28
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	3b0c      	subs	r3, #12
 8000ddc:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	3b0c      	subs	r3, #12
 8000dea:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000dee:	3304      	adds	r3, #4
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	3b0c      	subs	r3, #12
 8000dfa:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000dfe:	3308      	adds	r3, #8
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	3b0c      	subs	r3, #12
 8000e0a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000e0e:	330c      	adds	r3, #12
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	3b0c      	subs	r3, #12
 8000e1a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000e1e:	3310      	adds	r3, #16
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	3b0c      	subs	r3, #12
 8000e2a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000e2e:	3314      	adds	r3, #20
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	3b0c      	subs	r3, #12
 8000e3a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000e3e:	3318      	adds	r3, #24
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	3b0c      	subs	r3, #12
 8000e4a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8000e4e:	331c      	adds	r3, #28
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	3b0c      	subs	r3, #12
 8000e5a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000e5e:	3318      	adds	r3, #24
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	3b0c      	subs	r3, #12
 8000e6a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8000e6e:	330c      	adds	r3, #12
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	3b0c      	subs	r3, #12
 8000e7a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8000e7e:	3310      	adds	r3, #16
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	3b0c      	subs	r3, #12
 8000e8a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8000e8e:	3308      	adds	r3, #8
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	3b0c      	subs	r3, #12
 8000e9a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8000e9e:	3318      	adds	r3, #24
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	f107 0318 	add.w	r3, r7, #24
 8000ea8:	3b0c      	subs	r3, #12
 8000eaa:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8000eae:	331c      	adds	r3, #28
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	3b0c      	subs	r3, #12
 8000eba:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8000ebe:	330c      	adds	r3, #12
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	3b0c      	subs	r3, #12
 8000eca:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8000ece:	3310      	adds	r3, #16
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	3b0c      	subs	r3, #12
 8000eda:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	3b0c      	subs	r3, #12
 8000ee8:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8000eec:	3318      	adds	r3, #24
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	3b0c      	subs	r3, #12
 8000ef8:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8000efc:	331c      	adds	r3, #28
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	3b0c      	subs	r3, #12
 8000f08:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8000f0c:	3318      	adds	r3, #24
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	3b0c      	subs	r3, #12
 8000f18:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	3b0c      	subs	r3, #12
 8000f26:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	3b0c      	subs	r3, #12
 8000f34:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 8000f38:	3308      	adds	r3, #8
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	3b0c      	subs	r3, #12
 8000f44:	f503 53cc 	add.w	r3, r3, #6528	; 0x1980
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	3b0c      	subs	r3, #12
 8000f54:	f503 53cc 	add.w	r3, r3, #6528	; 0x1980
 8000f58:	3308      	adds	r3, #8
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	3b0c      	subs	r3, #12
 8000f64:	f503 53cd 	add.w	r3, r3, #6560	; 0x19a0
 8000f68:	3308      	adds	r3, #8
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	3b0c      	subs	r3, #12
 8000f74:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8000f78:	3310      	adds	r3, #16
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	3b0c      	subs	r3, #12
 8000f84:	f503 53d1 	add.w	r3, r3, #6688	; 0x1a20
 8000f88:	3310      	adds	r3, #16
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	3b0c      	subs	r3, #12
 8000f94:	f503 53d1 	add.w	r3, r3, #6688	; 0x1a20
 8000f98:	3314      	adds	r3, #20
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	3b0c      	subs	r3, #12
 8000fa4:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 8000fa8:	3314      	adds	r3, #20
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	3b0c      	subs	r3, #12
 8000fb4:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 8000fb8:	331c      	adds	r3, #28
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	3b0c      	subs	r3, #12
 8000fc4:	f503 53d6 	add.w	r3, r3, #6848	; 0x1ac0
 8000fc8:	331c      	adds	r3, #28
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	3b0c      	subs	r3, #12
 8000fd4:	f503 53d7 	add.w	r3, r3, #6880	; 0x1ae0
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	3b0c      	subs	r3, #12
 8000fe2:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	3b0c      	subs	r3, #12
 8000ff0:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	3b0c      	subs	r3, #12
 8001000:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001004:	3308      	adds	r3, #8
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	3b0c      	subs	r3, #12
 8001010:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001014:	330c      	adds	r3, #12
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	3b0c      	subs	r3, #12
 8001020:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 8001024:	330c      	adds	r3, #12
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	3b0c      	subs	r3, #12
 8001030:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001034:	3314      	adds	r3, #20
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	3b0c      	subs	r3, #12
 8001040:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001044:	3314      	adds	r3, #20
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	3b0c      	subs	r3, #12
 8001050:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001054:	3318      	adds	r3, #24
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	3b0c      	subs	r3, #12
 8001060:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001064:	3318      	adds	r3, #24
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	3b0c      	subs	r3, #12
 8001070:	f503 53e6 	add.w	r3, r3, #7360	; 0x1cc0
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	3b0c      	subs	r3, #12
 800107e:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	3b0c      	subs	r3, #12
 800108c:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 8001090:	3304      	adds	r3, #4
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	3b0c      	subs	r3, #12
 800109c:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80010a0:	3304      	adds	r3, #4
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	3b0c      	subs	r3, #12
 80010ac:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80010b0:	330c      	adds	r3, #12
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	3b0c      	subs	r3, #12
 80010bc:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 80010c0:	330c      	adds	r3, #12
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	3b0c      	subs	r3, #12
 80010cc:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 80010d0:	3310      	adds	r3, #16
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	3b0c      	subs	r3, #12
 80010dc:	f503 53ed 	add.w	r3, r3, #7584	; 0x1da0
 80010e0:	3310      	adds	r3, #16
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	3b0c      	subs	r3, #12
 80010ec:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80010f0:	3318      	adds	r3, #24
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	3b0c      	subs	r3, #12
 80010fc:	f503 53f1 	add.w	r3, r3, #7712	; 0x1e20
 8001100:	3318      	adds	r3, #24
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	3b0c      	subs	r3, #12
 800110c:	f503 53f1 	add.w	r3, r3, #7712	; 0x1e20
 8001110:	331c      	adds	r3, #28
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	3b0c      	subs	r3, #12
 800111c:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8001120:	331c      	adds	r3, #28
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	3b0c      	subs	r3, #12
 800112c:	f503 53f6 	add.w	r3, r3, #7872	; 0x1ec0
 8001130:	3304      	adds	r3, #4
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	3b0c      	subs	r3, #12
 800113c:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8001140:	3304      	adds	r3, #4
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	3b0c      	subs	r3, #12
 800114c:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8001150:	3308      	adds	r3, #8
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	f107 0318 	add.w	r3, r7, #24
 800115a:	3b0c      	subs	r3, #12
 800115c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001160:	3308      	adds	r3, #8
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	3b0c      	subs	r3, #12
 800116c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8001170:	3310      	adds	r3, #16
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	3b0c      	subs	r3, #12
 800117c:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8001180:	3310      	adds	r3, #16
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	3b0c      	subs	r3, #12
 800118c:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8001190:	3314      	adds	r3, #20
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	3b0c      	subs	r3, #12
 800119c:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 80011a0:	3314      	adds	r3, #20
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	3b0c      	subs	r3, #12
 80011ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011b0:	331c      	adds	r3, #28
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	3b0c      	subs	r3, #12
 80011bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011c0:	333c      	adds	r3, #60	; 0x3c
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	3b0c      	subs	r3, #12
 80011cc:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	3b0c      	subs	r3, #12
 80011da:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80011de:	3320      	adds	r3, #32
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	3b0c      	subs	r3, #12
 80011ea:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80011ee:	3308      	adds	r3, #8
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	3b0c      	subs	r3, #12
 80011fa:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80011fe:	3328      	adds	r3, #40	; 0x28
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	3b0c      	subs	r3, #12
 800120a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800120e:	332c      	adds	r3, #44	; 0x2c
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	3b0c      	subs	r3, #12
 800121a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800121e:	330c      	adds	r3, #12
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	3b0c      	subs	r3, #12
 800122a:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 800122e:	3334      	adds	r3, #52	; 0x34
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	3b0c      	subs	r3, #12
 800123a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800123e:	3314      	adds	r3, #20
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	3b0c      	subs	r3, #12
 800124a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800124e:	3318      	adds	r3, #24
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	3b0c      	subs	r3, #12
 800125a:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 800125e:	3338      	adds	r3, #56	; 0x38
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	3b0c      	subs	r3, #12
 800126a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800126e:	3320      	adds	r3, #32
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	3b0c      	subs	r3, #12
 800127a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	3b0c      	subs	r3, #12
 8001288:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800128c:	3304      	adds	r3, #4
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	3b0c      	subs	r3, #12
 8001298:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800129c:	3324      	adds	r3, #36	; 0x24
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	3b0c      	subs	r3, #12
 80012a8:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
 80012ac:	330c      	adds	r3, #12
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	3b0c      	subs	r3, #12
 80012b8:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
 80012bc:	332c      	adds	r3, #44	; 0x2c
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	3b0c      	subs	r3, #12
 80012c8:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
 80012cc:	3330      	adds	r3, #48	; 0x30
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	f107 0318 	add.w	r3, r7, #24
 80012d6:	3b0c      	subs	r3, #12
 80012d8:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 80012dc:	3310      	adds	r3, #16
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	f107 0318 	add.w	r3, r7, #24
 80012e6:	3b0c      	subs	r3, #12
 80012e8:	f503 530d 	add.w	r3, r3, #9024	; 0x2340
 80012ec:	3338      	adds	r3, #56	; 0x38
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	3b0c      	subs	r3, #12
 80012f8:	f503 530e 	add.w	r3, r3, #9088	; 0x2380
 80012fc:	3318      	adds	r3, #24
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	3b0c      	subs	r3, #12
 8001308:	f503 530e 	add.w	r3, r3, #9088	; 0x2380
 800130c:	331c      	adds	r3, #28
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	3b0c      	subs	r3, #12
 8001318:	f503 530e 	add.w	r3, r3, #9088	; 0x2380
 800131c:	333c      	adds	r3, #60	; 0x3c
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	3b0c      	subs	r3, #12
 8001328:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800132c:	3324      	adds	r3, #36	; 0x24
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	3b0c      	subs	r3, #12
 8001338:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800133c:	3304      	adds	r3, #4
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	3b0c      	subs	r3, #12
 8001348:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800134c:	3308      	adds	r3, #8
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	3b0c      	subs	r3, #12
 8001358:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800135c:	330c      	adds	r3, #12
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	3b0c      	subs	r3, #12
 8001368:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800136c:	3310      	adds	r3, #16
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	3b0c      	subs	r3, #12
 8001378:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800137c:	3314      	adds	r3, #20
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	3b0c      	subs	r3, #12
 8001388:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800138c:	3318      	adds	r3, #24
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	3b0c      	subs	r3, #12
 8001398:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800139c:	331c      	adds	r3, #28
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	f107 0318 	add.w	r3, r7, #24
 80013a6:	3b0c      	subs	r3, #12
 80013a8:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80013ac:	3320      	adds	r3, #32
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	3b0c      	subs	r3, #12
 80013b8:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80013bc:	3324      	adds	r3, #36	; 0x24
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	3b0c      	subs	r3, #12
 80013c8:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80013cc:	3328      	adds	r3, #40	; 0x28
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	3b0c      	subs	r3, #12
 80013d8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80013dc:	3310      	adds	r3, #16
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	3b0c      	subs	r3, #12
 80013e8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80013ec:	3314      	adds	r3, #20
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	3b0c      	subs	r3, #12
 80013f8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80013fc:	3318      	adds	r3, #24
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	3b0c      	subs	r3, #12
 8001408:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800140c:	331c      	adds	r3, #28
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	3b0c      	subs	r3, #12
 8001418:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800141c:	3320      	adds	r3, #32
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	3b0c      	subs	r3, #12
 8001428:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800142c:	3324      	adds	r3, #36	; 0x24
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	3b0c      	subs	r3, #12
 8001438:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800143c:	3328      	adds	r3, #40	; 0x28
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	3b0c      	subs	r3, #12
 8001448:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800144c:	332c      	adds	r3, #44	; 0x2c
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	3b0c      	subs	r3, #12
 8001458:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	3b0c      	subs	r3, #12
 8001468:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800146c:	3334      	adds	r3, #52	; 0x34
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	3b0c      	subs	r3, #12
 8001478:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800147c:	3314      	adds	r3, #20
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	3b0c      	subs	r3, #12
 8001488:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 800148c:	333c      	adds	r3, #60	; 0x3c
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	3b0c      	subs	r3, #12
 8001498:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 800149c:	331c      	adds	r3, #28
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	3b0c      	subs	r3, #12
 80014a8:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 80014ac:	3320      	adds	r3, #32
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	3b0c      	subs	r3, #12
 80014b8:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	3b0c      	subs	r3, #12
 80014c6:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80014ca:	3328      	adds	r3, #40	; 0x28
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	3b0c      	subs	r3, #12
 80014d6:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 80014da:	3308      	adds	r3, #8
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	3b0c      	subs	r3, #12
 80014e6:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 80014ea:	330c      	adds	r3, #12
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	3b0c      	subs	r3, #12
 80014f6:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 80014fa:	332c      	adds	r3, #44	; 0x2c
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	3b0c      	subs	r3, #12
 8001506:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 800150a:	3314      	adds	r3, #20
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	3b0c      	subs	r3, #12
 8001516:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 800151a:	3334      	adds	r3, #52	; 0x34
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	3b0c      	subs	r3, #12
 8001526:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 800152a:	3338      	adds	r3, #56	; 0x38
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	3b0c      	subs	r3, #12
 8001536:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800153a:	3318      	adds	r3, #24
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	3b0c      	subs	r3, #12
 8001546:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	3b0c      	subs	r3, #12
 8001554:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8001558:	3320      	adds	r3, #32
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	3b0c      	subs	r3, #12
 8001564:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8001568:	3324      	adds	r3, #36	; 0x24
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	3b0c      	subs	r3, #12
 8001574:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8001578:	3304      	adds	r3, #4
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f107 0318 	add.w	r3, r7, #24
 8001582:	3b0c      	subs	r3, #12
 8001584:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001588:	332c      	adds	r3, #44	; 0x2c
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	3b0c      	subs	r3, #12
 8001594:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8001598:	330c      	adds	r3, #12
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	3b0c      	subs	r3, #12
 80015a4:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 80015a8:	3310      	adds	r3, #16
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	3b0c      	subs	r3, #12
 80015b4:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 80015b8:	3330      	adds	r3, #48	; 0x30
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	3b0c      	subs	r3, #12
 80015c4:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80015c8:	3318      	adds	r3, #24
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	3b0c      	subs	r3, #12
 80015d4:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80015d8:	3338      	adds	r3, #56	; 0x38
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	3b0c      	subs	r3, #12
 80015e4:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80015e8:	333c      	adds	r3, #60	; 0x3c
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f107 0318 	add.w	r3, r7, #24
 80015f2:	3b0c      	subs	r3, #12
 80015f4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80015f8:	331c      	adds	r3, #28
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f107 0318 	add.w	r3, r7, #24
 8001602:	3b0c      	subs	r3, #12
 8001604:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8001608:	3304      	adds	r3, #4
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	3b0c      	subs	r3, #12
 8001614:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8001618:	3324      	adds	r3, #36	; 0x24
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	3b0c      	subs	r3, #12
 8001624:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8001628:	3328      	adds	r3, #40	; 0x28
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	3b0c      	subs	r3, #12
 8001634:	f503 5327 	add.w	r3, r3, #10688	; 0x29c0
 8001638:	3308      	adds	r3, #8
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	3b0c      	subs	r3, #12
 8001644:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001648:	3330      	adds	r3, #48	; 0x30
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	3b0c      	subs	r3, #12
 8001654:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8001658:	3310      	adds	r3, #16
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	3b0c      	subs	r3, #12
 8001664:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8001668:	3314      	adds	r3, #20
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	3b0c      	subs	r3, #12
 8001674:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8001678:	3334      	adds	r3, #52	; 0x34
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	3b0c      	subs	r3, #12
 8001684:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8001688:	331c      	adds	r3, #28
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	3b0c      	subs	r3, #12
 8001694:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8001698:	333c      	adds	r3, #60	; 0x3c
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	3b0c      	subs	r3, #12
 80016a4:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	3b0c      	subs	r3, #12
 80016b2:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 80016b6:	3320      	adds	r3, #32
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	3b0c      	subs	r3, #12
 80016c2:	f503 532e 	add.w	r3, r3, #11136	; 0x2b80
 80016c6:	3308      	adds	r3, #8
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	3b0c      	subs	r3, #12
 80016d2:	f503 532e 	add.w	r3, r3, #11136	; 0x2b80
 80016d6:	3328      	adds	r3, #40	; 0x28
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	3b0c      	subs	r3, #12
 80016e2:	f503 532e 	add.w	r3, r3, #11136	; 0x2b80
 80016e6:	332c      	adds	r3, #44	; 0x2c
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	3b0c      	subs	r3, #12
 80016f2:	f503 532f 	add.w	r3, r3, #11200	; 0x2bc0
 80016f6:	330c      	adds	r3, #12
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	3b0c      	subs	r3, #12
 8001702:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8001706:	3334      	adds	r3, #52	; 0x34
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	3b0c      	subs	r3, #12
 8001712:	f503 5331 	add.w	r3, r3, #11328	; 0x2c40
 8001716:	3314      	adds	r3, #20
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	3b0c      	subs	r3, #12
 8001722:	f503 5331 	add.w	r3, r3, #11328	; 0x2c40
 8001726:	3318      	adds	r3, #24
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	3b0c      	subs	r3, #12
 8001732:	f503 5331 	add.w	r3, r3, #11328	; 0x2c40
 8001736:	3338      	adds	r3, #56	; 0x38
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	3b0c      	subs	r3, #12
 8001742:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 8001746:	3320      	adds	r3, #32
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	3b0c      	subs	r3, #12
 8001752:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	3b0c      	subs	r3, #12
 8001760:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8001764:	3304      	adds	r3, #4
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f107 0318 	add.w	r3, r7, #24
 800176e:	3b0c      	subs	r3, #12
 8001770:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8001774:	3324      	adds	r3, #36	; 0x24
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	3b0c      	subs	r3, #12
 8001780:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 8001784:	330c      	adds	r3, #12
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f107 0318 	add.w	r3, r7, #24
 800178e:	3b0c      	subs	r3, #12
 8001790:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 8001794:	332c      	adds	r3, #44	; 0x2c
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	3b0c      	subs	r3, #12
 80017a0:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 80017a4:	3330      	adds	r3, #48	; 0x30
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	3b0c      	subs	r3, #12
 80017b0:	f503 5337 	add.w	r3, r3, #11712	; 0x2dc0
 80017b4:	3310      	adds	r3, #16
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	3b0c      	subs	r3, #12
 80017c0:	f503 5338 	add.w	r3, r3, #11776	; 0x2e00
 80017c4:	3338      	adds	r3, #56	; 0x38
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	3b0c      	subs	r3, #12
 80017d0:	f503 5339 	add.w	r3, r3, #11840	; 0x2e40
 80017d4:	3318      	adds	r3, #24
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	3b0c      	subs	r3, #12
 80017e0:	f503 5339 	add.w	r3, r3, #11840	; 0x2e40
 80017e4:	331c      	adds	r3, #28
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f107 0318 	add.w	r3, r7, #24
 80017ee:	3b0c      	subs	r3, #12
 80017f0:	f503 5339 	add.w	r3, r3, #11840	; 0x2e40
 80017f4:	333c      	adds	r3, #60	; 0x3c
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 0318 	add.w	r3, r7, #24
 80017fe:	3b0c      	subs	r3, #12
 8001800:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001804:	3324      	adds	r3, #36	; 0x24
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	3b0c      	subs	r3, #12
 8001810:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001814:	3304      	adds	r3, #4
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	3b0c      	subs	r3, #12
 8001820:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001824:	3308      	adds	r3, #8
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	3b0c      	subs	r3, #12
 8001830:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001834:	3328      	adds	r3, #40	; 0x28
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	3b0c      	subs	r3, #12
 8001840:	f503 533e 	add.w	r3, r3, #12160	; 0x2f80
 8001844:	3310      	adds	r3, #16
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f107 0318 	add.w	r3, r7, #24
 800184e:	3b0c      	subs	r3, #12
 8001850:	f503 533e 	add.w	r3, r3, #12160	; 0x2f80
 8001854:	3330      	adds	r3, #48	; 0x30
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	3b0c      	subs	r3, #12
 8001860:	f503 533e 	add.w	r3, r3, #12160	; 0x2f80
 8001864:	3334      	adds	r3, #52	; 0x34
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	3b0c      	subs	r3, #12
 8001870:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001874:	3310      	adds	r3, #16
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	3b0c      	subs	r3, #12
 8001880:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001884:	3318      	adds	r3, #24
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f107 0318 	add.w	r3, r7, #24
 800188e:	3b0c      	subs	r3, #12
 8001890:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001894:	3338      	adds	r3, #56	; 0x38
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	3b0c      	subs	r3, #12
 80018a0:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	3b0c      	subs	r3, #12
 80018ae:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80018b2:	331c      	adds	r3, #28
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f107 0318 	add.w	r3, r7, #24
 80018bc:	3b0c      	subs	r3, #12
 80018be:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80018c2:	3320      	adds	r3, #32
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f107 0318 	add.w	r3, r7, #24
 80018cc:	3b0c      	subs	r3, #12
 80018ce:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80018d2:	3338      	adds	r3, #56	; 0x38
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	3b0c      	subs	r3, #12
 80018de:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 80018e2:	3308      	adds	r3, #8
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	3b0c      	subs	r3, #12
 80018ee:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 80018f2:	330c      	adds	r3, #12
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	3b0c      	subs	r3, #12
 80018fe:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8001902:	331c      	adds	r3, #28
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	3b0c      	subs	r3, #12
 800190e:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8001912:	3320      	adds	r3, #32
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	3b0c      	subs	r3, #12
 800191e:	f503 5343 	add.w	r3, r3, #12480	; 0x30c0
 8001922:	3330      	adds	r3, #48	; 0x30
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	3b0c      	subs	r3, #12
 800192e:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8001932:	3308      	adds	r3, #8
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	3b0c      	subs	r3, #12
 800193e:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8001942:	330c      	adds	r3, #12
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	3b0c      	subs	r3, #12
 800194e:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8001952:	3320      	adds	r3, #32
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	3b0c      	subs	r3, #12
 800195e:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8001962:	333c      	adds	r3, #60	; 0x3c
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	3b0c      	subs	r3, #12
 800196e:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	3b0c      	subs	r3, #12
 800197c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001980:	3304      	adds	r3, #4
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	3b0c      	subs	r3, #12
 800198c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001990:	3308      	adds	r3, #8
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	3b0c      	subs	r3, #12
 800199c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 80019a0:	330c      	adds	r3, #12
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	3b0c      	subs	r3, #12
 80019ac:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 80019b0:	3310      	adds	r3, #16
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	3b0c      	subs	r3, #12
 80019bc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 80019c0:	3314      	adds	r3, #20
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f107 0318 	add.w	r3, r7, #24
 80019ca:	3b0c      	subs	r3, #12
 80019cc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 80019d0:	3318      	adds	r3, #24
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f107 0318 	add.w	r3, r7, #24
 80019da:	3b0c      	subs	r3, #12
 80019dc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 80019e0:	331c      	adds	r3, #28
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	3b0c      	subs	r3, #12
 80019ec:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 80019f0:	3320      	adds	r3, #32
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	3b0c      	subs	r3, #12
 80019fc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001a00:	3324      	adds	r3, #36	; 0x24
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f107 0318 	add.w	r3, r7, #24
 8001a0a:	3b0c      	subs	r3, #12
 8001a0c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001a10:	3328      	adds	r3, #40	; 0x28
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f107 0318 	add.w	r3, r7, #24
 8001a1a:	3b0c      	subs	r3, #12
 8001a1c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001a20:	332c      	adds	r3, #44	; 0x2c
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 0318 	add.w	r3, r7, #24
 8001a2a:	3b0c      	subs	r3, #12
 8001a2c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001a30:	3330      	adds	r3, #48	; 0x30
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f107 0318 	add.w	r3, r7, #24
 8001a3a:	3b0c      	subs	r3, #12
 8001a3c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001a40:	3334      	adds	r3, #52	; 0x34
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f107 0318 	add.w	r3, r7, #24
 8001a4a:	3b0c      	subs	r3, #12
 8001a4c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001a50:	3338      	adds	r3, #56	; 0x38
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	3b0c      	subs	r3, #12
 8001a5c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8001a60:	333c      	adds	r3, #60	; 0x3c
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	3b0c      	subs	r3, #12
 8001a6c:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	3b0c      	subs	r3, #12
 8001a7a:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 8001a7e:	3304      	adds	r3, #4
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	3b0c      	subs	r3, #12
 8001a8a:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 8001a8e:	3320      	adds	r3, #32
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	3b0c      	subs	r3, #12
 8001a9a:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 8001a9e:	3334      	adds	r3, #52	; 0x34
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	3b0c      	subs	r3, #12
 8001aaa:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 8001aae:	3338      	adds	r3, #56	; 0x38
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	3b0c      	subs	r3, #12
 8001aba:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8001abe:	3308      	adds	r3, #8
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	3b0c      	subs	r3, #12
 8001aca:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8001ace:	3310      	adds	r3, #16
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	3b0c      	subs	r3, #12
 8001ada:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8001ade:	3320      	adds	r3, #32
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	3b0c      	subs	r3, #12
 8001aea:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8001aee:	3324      	adds	r3, #36	; 0x24
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	3b0c      	subs	r3, #12
 8001afa:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8001afe:	3330      	adds	r3, #48	; 0x30
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	3b0c      	subs	r3, #12
 8001b0a:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f107 0318 	add.w	r3, r7, #24
 8001b16:	3b0c      	subs	r3, #12
 8001b18:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	3b0c      	subs	r3, #12
 8001b28:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8001b2c:	3310      	adds	r3, #16
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	3b0c      	subs	r3, #12
 8001b38:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	3b0c      	subs	r3, #12
 8001b48:	f503 534e 	add.w	r3, r3, #13184	; 0x3380
 8001b4c:	3330      	adds	r3, #48	; 0x30
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f107 0318 	add.w	r3, r7, #24
 8001b56:	3b0c      	subs	r3, #12
 8001b58:	f503 534e 	add.w	r3, r3, #13184	; 0x3380
 8001b5c:	3338      	adds	r3, #56	; 0x38
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	3b0c      	subs	r3, #12
 8001b68:	f503 534e 	add.w	r3, r3, #13184	; 0x3380
 8001b6c:	333c      	adds	r3, #60	; 0x3c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f107 0318 	add.w	r3, r7, #24
 8001b76:	3b0c      	subs	r3, #12
 8001b78:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	3b0c      	subs	r3, #12
 8001b86:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8001b8a:	3320      	adds	r3, #32
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	3b0c      	subs	r3, #12
 8001b96:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8001b9a:	3324      	adds	r3, #36	; 0x24
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	3b0c      	subs	r3, #12
 8001ba6:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8001baa:	3328      	adds	r3, #40	; 0x28
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	3b0c      	subs	r3, #12
 8001bb6:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8001bba:	3330      	adds	r3, #48	; 0x30
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	3b0c      	subs	r3, #12
 8001bc6:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 8001bca:	3308      	adds	r3, #8
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f107 0318 	add.w	r3, r7, #24
 8001bd4:	3b0c      	subs	r3, #12
 8001bd6:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 8001bda:	3310      	adds	r3, #16
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f107 0318 	add.w	r3, r7, #24
 8001be4:	3b0c      	subs	r3, #12
 8001be6:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 8001bea:	3314      	adds	r3, #20
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	3b0c      	subs	r3, #12
 8001bf6:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 8001bfa:	3320      	adds	r3, #32
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	3b0c      	subs	r3, #12
 8001c06:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 8001c0a:	3324      	adds	r3, #36	; 0x24
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	3b0c      	subs	r3, #12
 8001c16:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
 8001c1a:	332c      	adds	r3, #44	; 0x2c
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f107 0318 	add.w	r3, r7, #24
 8001c24:	3b0c      	subs	r3, #12
 8001c26:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
 8001c2a:	3330      	adds	r3, #48	; 0x30
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f107 0318 	add.w	r3, r7, #24
 8001c34:	3b0c      	subs	r3, #12
 8001c36:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
 8001c3a:	333c      	adds	r3, #60	; 0x3c
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	3b0c      	subs	r3, #12
 8001c46:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	3b0c      	subs	r3, #12
 8001c54:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001c58:	3314      	adds	r3, #20
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	3b0c      	subs	r3, #12
 8001c64:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001c68:	3318      	adds	r3, #24
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	3b0c      	subs	r3, #12
 8001c74:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001c78:	331c      	adds	r3, #28
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	3b0c      	subs	r3, #12
 8001c84:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001c88:	3320      	adds	r3, #32
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f107 0318 	add.w	r3, r7, #24
 8001c92:	3b0c      	subs	r3, #12
 8001c94:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001c98:	3324      	adds	r3, #36	; 0x24
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	3b0c      	subs	r3, #12
 8001ca4:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001ca8:	3328      	adds	r3, #40	; 0x28
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f107 0318 	add.w	r3, r7, #24
 8001cb2:	3b0c      	subs	r3, #12
 8001cb4:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001cb8:	332c      	adds	r3, #44	; 0x2c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	3b0c      	subs	r3, #12
 8001cc4:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001cc8:	3330      	adds	r3, #48	; 0x30
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f107 0318 	add.w	r3, r7, #24
 8001cd2:	3b0c      	subs	r3, #12
 8001cd4:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001cd8:	3334      	adds	r3, #52	; 0x34
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f107 0318 	add.w	r3, r7, #24
 8001ce2:	3b0c      	subs	r3, #12
 8001ce4:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001ce8:	3338      	adds	r3, #56	; 0x38
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f107 0318 	add.w	r3, r7, #24
 8001cf2:	3b0c      	subs	r3, #12
 8001cf4:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8001cf8:	333c      	adds	r3, #60	; 0x3c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	3b0c      	subs	r3, #12
 8001d04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	3b0c      	subs	r3, #12
 8001d12:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d16:	3304      	adds	r3, #4
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	3b0c      	subs	r3, #12
 8001d22:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d26:	3308      	adds	r3, #8
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	3b0c      	subs	r3, #12
 8001d32:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d36:	330c      	adds	r3, #12
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f107 0318 	add.w	r3, r7, #24
 8001d40:	3b0c      	subs	r3, #12
 8001d42:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d46:	3310      	adds	r3, #16
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	3b0c      	subs	r3, #12
 8001d52:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d56:	3314      	adds	r3, #20
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	3b0c      	subs	r3, #12
 8001d62:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d66:	3318      	adds	r3, #24
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	3b0c      	subs	r3, #12
 8001d72:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d76:	331c      	adds	r3, #28
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	3b0c      	subs	r3, #12
 8001d82:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d86:	3320      	adds	r3, #32
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	3b0c      	subs	r3, #12
 8001d92:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001d96:	3324      	adds	r3, #36	; 0x24
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	3b0c      	subs	r3, #12
 8001da2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001da6:	3328      	adds	r3, #40	; 0x28
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	3b0c      	subs	r3, #12
 8001db2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001db6:	332c      	adds	r3, #44	; 0x2c
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	3b0c      	subs	r3, #12
 8001dc2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001dc6:	3330      	adds	r3, #48	; 0x30
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	3b0c      	subs	r3, #12
 8001dd2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001dd6:	3334      	adds	r3, #52	; 0x34
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	3b0c      	subs	r3, #12
 8001de2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001de6:	3338      	adds	r3, #56	; 0x38
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	3b0c      	subs	r3, #12
 8001df2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8001df6:	333c      	adds	r3, #60	; 0x3c
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f107 0318 	add.w	r3, r7, #24
 8001e00:	3b0c      	subs	r3, #12
 8001e02:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	3b0c      	subs	r3, #12
 8001e10:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e14:	3304      	adds	r3, #4
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	3b0c      	subs	r3, #12
 8001e20:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e24:	3308      	adds	r3, #8
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f107 0318 	add.w	r3, r7, #24
 8001e2e:	3b0c      	subs	r3, #12
 8001e30:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e34:	330c      	adds	r3, #12
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f107 0318 	add.w	r3, r7, #24
 8001e3e:	3b0c      	subs	r3, #12
 8001e40:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e44:	3310      	adds	r3, #16
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f107 0318 	add.w	r3, r7, #24
 8001e4e:	3b0c      	subs	r3, #12
 8001e50:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e54:	3314      	adds	r3, #20
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f107 0318 	add.w	r3, r7, #24
 8001e5e:	3b0c      	subs	r3, #12
 8001e60:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e64:	3328      	adds	r3, #40	; 0x28
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f107 0318 	add.w	r3, r7, #24
 8001e6e:	3b0c      	subs	r3, #12
 8001e70:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8001e74:	332c      	adds	r3, #44	; 0x2c
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	3b0c      	subs	r3, #12
 8001e80:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8001e84:	3314      	adds	r3, #20
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f107 0318 	add.w	r3, r7, #24
 8001e8e:	3b0c      	subs	r3, #12
 8001e90:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8001e94:	3318      	adds	r3, #24
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f107 0318 	add.w	r3, r7, #24
 8001e9e:	3b0c      	subs	r3, #12
 8001ea0:	f503 535f 	add.w	r3, r3, #14272	; 0x37c0
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	3b0c      	subs	r3, #12
 8001eae:	f503 535f 	add.w	r3, r3, #14272	; 0x37c0
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	3b0c      	subs	r3, #12
 8001ebe:	f503 5361 	add.w	r3, r3, #14400	; 0x3840
 8001ec2:	332c      	adds	r3, #44	; 0x2c
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	3b0c      	subs	r3, #12
 8001ece:	f503 5361 	add.w	r3, r3, #14400	; 0x3840
 8001ed2:	3330      	adds	r3, #48	; 0x30
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	3b0c      	subs	r3, #12
 8001ede:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f107 0318 	add.w	r3, r7, #24
 8001eec:	3b0c      	subs	r3, #12
 8001eee:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8001ef2:	331c      	adds	r3, #28
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	3b0c      	subs	r3, #12
 8001efe:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 8001f02:	3304      	adds	r3, #4
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f107 0318 	add.w	r3, r7, #24
 8001f0c:	3b0c      	subs	r3, #12
 8001f0e:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 8001f12:	3308      	adds	r3, #8
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	3b0c      	subs	r3, #12
 8001f1e:	f503 5369 	add.w	r3, r3, #14912	; 0x3a40
 8001f22:	3330      	adds	r3, #48	; 0x30
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	3b0c      	subs	r3, #12
 8001f2e:	f503 5369 	add.w	r3, r3, #14912	; 0x3a40
 8001f32:	3338      	adds	r3, #56	; 0x38
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f107 0318 	add.w	r3, r7, #24
 8001f3c:	3b0c      	subs	r3, #12
 8001f3e:	f503 536c 	add.w	r3, r3, #15104	; 0x3b00
 8001f42:	3318      	adds	r3, #24
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	3b0c      	subs	r3, #12
 8001f4e:	f503 536c 	add.w	r3, r3, #15104	; 0x3b00
 8001f52:	3324      	adds	r3, #36	; 0x24
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	3b0c      	subs	r3, #12
 8001f5e:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8001f62:	3304      	adds	r3, #4
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	3b0c      	subs	r3, #12
 8001f6e:	f503 536f 	add.w	r3, r3, #15296	; 0x3bc0
 8001f72:	3314      	adds	r3, #20
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	3b0c      	subs	r3, #12
 8001f7e:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8001f82:	332c      	adds	r3, #44	; 0x2c
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f107 0318 	add.w	r3, r7, #24
 8001f8c:	3b0c      	subs	r3, #12
 8001f8e:	f503 5372 	add.w	r3, r3, #15488	; 0x3c80
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	f107 0318 	add.w	r3, r7, #24
 8001f9a:	3b0c      	subs	r3, #12
 8001f9c:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8001fa0:	3318      	adds	r3, #24
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f107 0318 	add.w	r3, r7, #24
 8001faa:	3b0c      	subs	r3, #12
 8001fac:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8001fb0:	3330      	adds	r3, #48	; 0x30
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f107 0318 	add.w	r3, r7, #24
 8001fba:	3b0c      	subs	r3, #12
 8001fbc:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f107 0318 	add.w	r3, r7, #24
 8001fc8:	3b0c      	subs	r3, #12
 8001fca:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 8001fce:	3320      	adds	r3, #32
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	3b0c      	subs	r3, #12
 8001fda:	f503 5379 	add.w	r3, r3, #15936	; 0x3e40
 8001fde:	3328      	adds	r3, #40	; 0x28
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	f107 0318 	add.w	r3, r7, #24
 8001fe8:	3b0c      	subs	r3, #12
 8001fea:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8001fee:	3310      	adds	r3, #16
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	3b0c      	subs	r3, #12
 8001ffa:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8001ffe:	3314      	adds	r3, #20
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	3b0c      	subs	r3, #12
 800200a:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 800200e:	330c      	adds	r3, #12
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	3b0c      	subs	r3, #12
 800201a:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 800201e:	3310      	adds	r3, #16
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	3b0c      	subs	r3, #12
 800202a:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800202e:	3304      	adds	r3, #4
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	3b0c      	subs	r3, #12
 800203a:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 800203e:	3308      	adds	r3, #8
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f107 0318 	add.w	r3, r7, #24
 8002048:	3b0c      	subs	r3, #12
 800204a:	f503 537e 	add.w	r3, r3, #16256	; 0x3f80
 800204e:	3330      	adds	r3, #48	; 0x30
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	3b0c      	subs	r3, #12
 800205a:	f503 537e 	add.w	r3, r3, #16256	; 0x3f80
 800205e:	3334      	adds	r3, #52	; 0x34
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f107 0318 	add.w	r3, r7, #24
 8002068:	3b0c      	subs	r3, #12
 800206a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f107 0318 	add.w	r3, r7, #24
 8002078:	3b0c      	subs	r3, #12
 800207a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800207e:	333c      	adds	r3, #60	; 0x3c
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f107 0318 	add.w	r3, r7, #24
 8002088:	3b0c      	subs	r3, #12
 800208a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	3b0c      	subs	r3, #12
 8002098:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800209c:	3304      	adds	r3, #4
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	3b0c      	subs	r3, #12
 80020a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020ac:	3308      	adds	r3, #8
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	3b0c      	subs	r3, #12
 80020b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020bc:	330c      	adds	r3, #12
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f107 0318 	add.w	r3, r7, #24
 80020c6:	3b0c      	subs	r3, #12
 80020c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020cc:	3310      	adds	r3, #16
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	3b0c      	subs	r3, #12
 80020d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020dc:	3314      	adds	r3, #20
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f107 0318 	add.w	r3, r7, #24
 80020e6:	3b0c      	subs	r3, #12
 80020e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020ec:	3318      	adds	r3, #24
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	3b0c      	subs	r3, #12
 80020f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80020fc:	331c      	adds	r3, #28
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 0318 	add.w	r3, r7, #24
 8002106:	3b0c      	subs	r3, #12
 8002108:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800210c:	3320      	adds	r3, #32
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	3b0c      	subs	r3, #12
 8002118:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800211c:	3324      	adds	r3, #36	; 0x24
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	3b0c      	subs	r3, #12
 8002128:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800212c:	3328      	adds	r3, #40	; 0x28
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f107 0318 	add.w	r3, r7, #24
 8002136:	3b0c      	subs	r3, #12
 8002138:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800213c:	332c      	adds	r3, #44	; 0x2c
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f107 0318 	add.w	r3, r7, #24
 8002146:	3b0c      	subs	r3, #12
 8002148:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800214c:	3330      	adds	r3, #48	; 0x30
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	3b0c      	subs	r3, #12
 8002158:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800215c:	3334      	adds	r3, #52	; 0x34
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	3b0c      	subs	r3, #12
 8002168:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800216c:	3338      	adds	r3, #56	; 0x38
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	3b0c      	subs	r3, #12
 8002178:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800217c:	333c      	adds	r3, #60	; 0x3c
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f107 0318 	add.w	r3, r7, #24
 8002186:	3b0c      	subs	r3, #12
 8002188:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800218c:	3340      	adds	r3, #64	; 0x40
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f107 0318 	add.w	r3, r7, #24
 8002196:	3b0c      	subs	r3, #12
 8002198:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800219c:	3344      	adds	r3, #68	; 0x44
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	3b0c      	subs	r3, #12
 80021a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021ac:	3348      	adds	r3, #72	; 0x48
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f107 0318 	add.w	r3, r7, #24
 80021b6:	3b0c      	subs	r3, #12
 80021b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021bc:	334c      	adds	r3, #76	; 0x4c
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f107 0318 	add.w	r3, r7, #24
 80021c6:	3b0c      	subs	r3, #12
 80021c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021cc:	3350      	adds	r3, #80	; 0x50
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	3b0c      	subs	r3, #12
 80021d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021dc:	3354      	adds	r3, #84	; 0x54
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	3b0c      	subs	r3, #12
 80021e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021ec:	3358      	adds	r3, #88	; 0x58
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
						{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
						{0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0},
						{0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0}};

	int p=0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80021f8:	f102 020c 	add.w	r2, r2, #12
 80021fc:	6013      	str	r3, [r2, #0]
		int i, j;
		for (i=0; i<96; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8002204:	f102 0214 	add.w	r2, r2, #20
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e061      	b.n	80022d0 <caricon+0x1dcc>
		{
			for(j=0; j<43; j++)
 800220c:	2300      	movs	r3, #0
 800220e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8002212:	f102 0210 	add.w	r2, r2, #16
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e048      	b.n	80022ac <caricon+0x1da8>
			{
				p=tab[i][j];
 800221a:	f107 0318 	add.w	r3, r7, #24
 800221e:	3b0c      	subs	r3, #12
 8002220:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8002224:	f102 0214 	add.w	r2, r2, #20
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	212b      	movs	r1, #43	; 0x2b
 800222c:	fb01 f102 	mul.w	r1, r1, r2
 8002230:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8002234:	f102 0210 	add.w	r2, r2, #16
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	440a      	add	r2, r1
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8002244:	f102 020c 	add.w	r2, r2, #12
 8002248:	6013      	str	r3, [r2, #0]
				if (p==1)
 800224a:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800224e:	f103 030c 	add.w	r3, r3, #12
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d11e      	bne.n	8002296 <caricon+0x1d92>
				{
					ST7735_DrawPixel(x+j, y+i, color);
 8002258:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800225c:	f103 0310 	add.w	r3, r3, #16
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	3b12      	subs	r3, #18
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	4413      	add	r3, r2
 800226e:	b298      	uxth	r0, r3
 8002270:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8002274:	f103 0314 	add.w	r3, r3, #20
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29a      	uxth	r2, r3
 800227c:	f107 0318 	add.w	r3, r7, #24
 8002280:	3b14      	subs	r3, #20
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	4413      	add	r3, r2
 8002286:	b299      	uxth	r1, r3
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	3b16      	subs	r3, #22
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	f001 fa57 	bl	8003744 <ST7735_DrawPixel>
			for(j=0; j<43; j++)
 8002296:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800229a:	f103 0310 	add.w	r3, r3, #16
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80022a6:	f102 0210 	add.w	r2, r2, #16
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80022b0:	f103 0310 	add.w	r3, r3, #16
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b2a      	cmp	r3, #42	; 0x2a
 80022b8:	ddaf      	ble.n	800221a <caricon+0x1d16>
		for (i=0; i<96; i++)
 80022ba:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80022be:	f103 0314 	add.w	r3, r3, #20
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80022ca:	f102 0214 	add.w	r2, r2, #20
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80022d4:	f103 0314 	add.w	r3, r3, #20
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b5f      	cmp	r3, #95	; 0x5f
 80022dc:	dd96      	ble.n	800220c <caricon+0x1d08>
				}
			}
		}
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	f507 4781 	add.w	r7, r7, #16512	; 0x4080
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}

080022ec <Rcardooricon>:
void Rcardooricon(uint16_t x, uint16_t y, uint16_t color)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4604      	mov	r4, r0
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	1dbb      	adds	r3, r7, #6
 80022fc:	4622      	mov	r2, r4
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4602      	mov	r2, r0
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	1cbb      	adds	r3, r7, #2
 8002308:	460a      	mov	r2, r1
 800230a:	801a      	strh	r2, [r3, #0]
	int tab[14][13]={	{1,0,0,0,0,0,0,0,0,0,0,0,0},
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	4618      	mov	r0, r3
 8002312:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 8002316:	461a      	mov	r2, r3
 8002318:	2100      	movs	r1, #0
 800231a:	f003 fd21 	bl	8005d60 <memset>
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2201      	movs	r2, #1
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	2201      	movs	r2, #1
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2201      	movs	r2, #1
 800233c:	66da      	str	r2, [r3, #108]	; 0x6c
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2201      	movs	r2, #1
 8002344:	671a      	str	r2, [r3, #112]	; 0x70
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	2201      	movs	r2, #1
 800234c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2201      	movs	r2, #1
 8002356:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	2201      	movs	r2, #1
 8002360:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2201      	movs	r2, #1
 800236a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	2201      	movs	r2, #1
 8002374:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2201      	movs	r2, #1
 800237e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	2201      	movs	r2, #1
 8002388:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	2201      	movs	r2, #1
 8002392:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2201      	movs	r2, #1
 800239c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2201      	movs	r2, #1
 80023a6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	2201      	movs	r2, #1
 80023b0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2201      	movs	r2, #1
 80023ba:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	2201      	movs	r2, #1
 80023c4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2201      	movs	r2, #1
 80023ce:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	2201      	movs	r2, #1
 80023d8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2201      	movs	r2, #1
 80023e2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2201      	movs	r2, #1
 80023ec:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2201      	movs	r2, #1
 80023f6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2201      	movs	r2, #1
 8002400:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2201      	movs	r2, #1
 800240a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	2201      	movs	r2, #1
 8002414:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
						{0,0,0,0,0,0,0,0,1,1,0,0,0},
						{0,0,0,0,0,0,0,0,0,1,1,0,0},
						{0,0,0,0,0,0,0,0,0,0,1,1,0},
						{0,0,0,0,0,0,0,0,0,0,0,1,1},
						{0,0,0,0,0,0,0,0,0,0,0,0,1}};
	int p=0;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
			int i, j;
			for (i=0; i<14; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8002424:	e038      	b.n	8002498 <Rcardooricon+0x1ac>
			{
				for(j=0; j<13; j++)
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800242c:	e02b      	b.n	8002486 <Rcardooricon+0x19a>
				{
					p=tab[i][j];
 800242e:	f107 010c 	add.w	r1, r7, #12
 8002432:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002444:	4413      	add	r3, r2
 8002446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800244a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
					if (p==1)
 800244e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002452:	2b01      	cmp	r3, #1
 8002454:	d112      	bne.n	800247c <Rcardooricon+0x190>
					{
						ST7735_DrawPixel(x+j, y+i, color);
 8002456:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800245a:	b29a      	uxth	r2, r3
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	4413      	add	r3, r2
 8002462:	b298      	uxth	r0, r3
 8002464:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002468:	b29a      	uxth	r2, r3
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b299      	uxth	r1, r3
 8002472:	1cbb      	adds	r3, r7, #2
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	f001 f964 	bl	8003744 <ST7735_DrawPixel>
				for(j=0; j<13; j++)
 800247c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002480:	3301      	adds	r3, #1
 8002482:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8002486:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800248a:	2b0c      	cmp	r3, #12
 800248c:	ddcf      	ble.n	800242e <Rcardooricon+0x142>
			for (i=0; i<14; i++)
 800248e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002492:	3301      	adds	r3, #1
 8002494:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8002498:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800249c:	2b0d      	cmp	r3, #13
 800249e:	ddc2      	ble.n	8002426 <Rcardooricon+0x13a>
					}
				}
			}
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}

080024ac <Lcardooricon>:
void Lcardooricon(uint16_t x, uint16_t y, uint16_t color)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4604      	mov	r4, r0
 80024b6:	4608      	mov	r0, r1
 80024b8:	4611      	mov	r1, r2
 80024ba:	1dbb      	adds	r3, r7, #6
 80024bc:	4622      	mov	r2, r4
 80024be:	801a      	strh	r2, [r3, #0]
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4602      	mov	r2, r0
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	1cbb      	adds	r3, r7, #2
 80024c8:	460a      	mov	r2, r1
 80024ca:	801a      	strh	r2, [r3, #0]
	int tab[14][13]={		{0,0,0,0,0,0,0,0,0,0,0,0,1},
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	4618      	mov	r0, r3
 80024d2:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 80024d6:	461a      	mov	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	f003 fc41 	bl	8005d60 <memset>
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	2201      	movs	r2, #1
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	2201      	movs	r2, #1
 80024ec:	661a      	str	r2, [r3, #96]	; 0x60
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	2201      	movs	r2, #1
 80024f4:	665a      	str	r2, [r3, #100]	; 0x64
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2201      	movs	r2, #1
 80024fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	2201      	movs	r2, #1
 8002506:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	2201      	movs	r2, #1
 8002510:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	2201      	movs	r2, #1
 800251a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	2201      	movs	r2, #1
 8002524:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	2201      	movs	r2, #1
 800252e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	2201      	movs	r2, #1
 8002538:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	2201      	movs	r2, #1
 8002542:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	2201      	movs	r2, #1
 800254c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	2201      	movs	r2, #1
 8002556:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	2201      	movs	r2, #1
 8002560:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	2201      	movs	r2, #1
 800256a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	2201      	movs	r2, #1
 8002574:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	2201      	movs	r2, #1
 800257e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	2201      	movs	r2, #1
 8002588:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	2201      	movs	r2, #1
 8002592:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2201      	movs	r2, #1
 800259c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	2201      	movs	r2, #1
 80025a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	2201      	movs	r2, #1
 80025b0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	2201      	movs	r2, #1
 80025ba:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	2201      	movs	r2, #1
 80025c4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	2201      	movs	r2, #1
 80025ce:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	2201      	movs	r2, #1
 80025d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
							{0,0,0,1,1,0,0,0,0,0,0,0,0},
							{0,0,1,1,0,0,0,0,0,0,0,0,0},
							{0,1,1,0,0,0,0,0,0,0,0,0,0},
							{1,1,0,0,0,0,0,0,0,0,0,0,0},
							{1,0,0,0,0,0,0,0,0,0,0,0,0}};
	int p=0;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
			int i, j;
			for (i=0; i<14; i++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80025e8:	e038      	b.n	800265c <Lcardooricon+0x1b0>
			{
				for(j=0; j<13; j++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80025f0:	e02b      	b.n	800264a <Lcardooricon+0x19e>
				{
					p=tab[i][j];
 80025f2:	f107 010c 	add.w	r1, r7, #12
 80025f6:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002608:	4413      	add	r3, r2
 800260a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800260e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
					if (p==1)
 8002612:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002616:	2b01      	cmp	r3, #1
 8002618:	d112      	bne.n	8002640 <Lcardooricon+0x194>
					{
						ST7735_DrawPixel(x+j, y+i, color);
 800261a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800261e:	b29a      	uxth	r2, r3
 8002620:	1dbb      	adds	r3, r7, #6
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	4413      	add	r3, r2
 8002626:	b298      	uxth	r0, r3
 8002628:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800262c:	b29a      	uxth	r2, r3
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
 8002634:	b299      	uxth	r1, r3
 8002636:	1cbb      	adds	r3, r7, #2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	f001 f882 	bl	8003744 <ST7735_DrawPixel>
				for(j=0; j<13; j++)
 8002640:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002644:	3301      	adds	r3, #1
 8002646:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800264a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800264e:	2b0c      	cmp	r3, #12
 8002650:	ddcf      	ble.n	80025f2 <Lcardooricon+0x146>
			for (i=0; i<14; i++)
 8002652:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002656:	3301      	adds	r3, #1
 8002658:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800265c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002660:	2b0d      	cmp	r3, #13
 8002662:	ddc2      	ble.n	80025ea <Lcardooricon+0x13e>
					}
				}
			}
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}

08002670 <fuelicon>:
void fuelicon(uint16_t x, uint16_t y, uint16_t color)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8002676:	af00      	add	r7, sp, #0
 8002678:	4604      	mov	r4, r0
 800267a:	4608      	mov	r0, r1
 800267c:	4611      	mov	r1, r2
 800267e:	1dbb      	adds	r3, r7, #6
 8002680:	4622      	mov	r2, r4
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4602      	mov	r2, r0
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	1cbb      	adds	r3, r7, #2
 800268c:	460a      	mov	r2, r1
 800268e:	801a      	strh	r2, [r3, #0]
	int tab[16][16]={ {0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0},
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4a26      	ldr	r2, [pc, #152]	; (8002730 <fuelicon+0xc0>)
 8002696:	4618      	mov	r0, r3
 8002698:	4611      	mov	r1, r2
 800269a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269e:	461a      	mov	r2, r3
 80026a0:	f003 fb50 	bl	8005d44 <memcpy>
					  {1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
					  {1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
					  {1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
					  {1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0}};

	int p=0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int i, j;
	for (i=0; i<16; i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80026b0:	e034      	b.n	800271c <fuelicon+0xac>
	{
		for(j=0; j<16; j++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80026b8:	e027      	b.n	800270a <fuelicon+0x9a>
		{
			p=tab[i][j];
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80026c2:	0111      	lsls	r1, r2, #4
 80026c4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80026c8:	440a      	add	r2, r1
 80026ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ce:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
			if (p==1)
 80026d2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d112      	bne.n	8002700 <fuelicon+0x90>
			{
				ST7735_DrawPixel(x+j, y+i, color);
 80026da:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80026de:	b29a      	uxth	r2, r3
 80026e0:	1dbb      	adds	r3, r7, #6
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	b298      	uxth	r0, r3
 80026e8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	b299      	uxth	r1, r3
 80026f6:	1cbb      	adds	r3, r7, #2
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f001 f822 	bl	8003744 <ST7735_DrawPixel>
		for(j=0; j<16; j++)
 8002700:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8002704:	3301      	adds	r3, #1
 8002706:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800270a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800270e:	2b0f      	cmp	r3, #15
 8002710:	ddd3      	ble.n	80026ba <fuelicon+0x4a>
	for (i=0; i<16; i++)
 8002712:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8002716:	3301      	adds	r3, #1
 8002718:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800271c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8002720:	2b0f      	cmp	r3, #15
 8002722:	ddc6      	ble.n	80026b2 <fuelicon+0x42>
			}
		}
	}
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	08005e18 	.word	0x08005e18

08002734 <frame>:
void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4623      	mov	r3, r4
 8002744:	80fb      	strh	r3, [r7, #6]
 8002746:	4603      	mov	r3, r0
 8002748:	80bb      	strh	r3, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	807b      	strh	r3, [r7, #2]
 800274e:	4613      	mov	r3, r2
 8002750:	803b      	strh	r3, [r7, #0]
	int i;
	int j;
	for(i = 0; i <= w ; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e019      	b.n	800278c <frame+0x58>
	{
	     ST7735_DrawPixel(x+i, y, color);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	b29a      	uxth	r2, r3
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	4413      	add	r3, r2
 8002760:	b29b      	uxth	r3, r3
 8002762:	8c3a      	ldrh	r2, [r7, #32]
 8002764:	88b9      	ldrh	r1, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 ffec 	bl	8003744 <ST7735_DrawPixel>
	     ST7735_DrawPixel(x+i, y+h, color);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	b29a      	uxth	r2, r3
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	4413      	add	r3, r2
 8002774:	b298      	uxth	r0, r3
 8002776:	88ba      	ldrh	r2, [r7, #4]
 8002778:	883b      	ldrh	r3, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	8c3a      	ldrh	r2, [r7, #32]
 8002780:	4619      	mov	r1, r3
 8002782:	f000 ffdf 	bl	8003744 <ST7735_DrawPixel>
	for(i = 0; i <= w ; i++)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3301      	adds	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	dde1      	ble.n	8002758 <frame+0x24>
	}
	for(j = 0; j < h; j++)
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	e019      	b.n	80027ce <frame+0x9a>
	{
	     ST7735_DrawPixel(x, y+j, color);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	b29a      	uxth	r2, r3
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	b299      	uxth	r1, r3
 80027a4:	8c3a      	ldrh	r2, [r7, #32]
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 ffcb 	bl	8003744 <ST7735_DrawPixel>
	     ST7735_DrawPixel(x+w, y+j, color);
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	4413      	add	r3, r2
 80027b4:	b298      	uxth	r0, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	88bb      	ldrh	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8c3a      	ldrh	r2, [r7, #32]
 80027c2:	4619      	mov	r1, r3
 80027c4:	f000 ffbe 	bl	8003744 <ST7735_DrawPixel>
	for(j = 0; j < h; j++)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	3301      	adds	r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	883b      	ldrh	r3, [r7, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dbe1      	blt.n	800279a <frame+0x66>
	}
}
 80027d6:	bf00      	nop
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <box>:
void box(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4604      	mov	r4, r0
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	80fb      	strh	r3, [r7, #6]
 80027f2:	4603      	mov	r3, r0
 80027f4:	80bb      	strh	r3, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]
 80027fa:	4613      	mov	r3, r2
 80027fc:	803b      	strh	r3, [r7, #0]
	int i;
	int j;
	for(i = 0; i <= w ; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e01a      	b.n	800283a <box+0x5a>
	{
		for(j = 0; j < h; j++)
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	e010      	b.n	800282c <box+0x4c>
		{
		     ST7735_DrawPixel(x+i, y+j, color);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	b29a      	uxth	r2, r3
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	4413      	add	r3, r2
 8002812:	b298      	uxth	r0, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	b29a      	uxth	r2, r3
 8002818:	88bb      	ldrh	r3, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	b29b      	uxth	r3, r3
 800281e:	8c3a      	ldrh	r2, [r7, #32]
 8002820:	4619      	mov	r1, r3
 8002822:	f000 ff8f 	bl	8003744 <ST7735_DrawPixel>
		for(j = 0; j < h; j++)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3301      	adds	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	883b      	ldrh	r3, [r7, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbea      	blt.n	800280a <box+0x2a>
	for(i = 0; i <= w ; i++)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	429a      	cmp	r2, r3
 8002840:	dde0      	ble.n	8002804 <box+0x24>
		}
	}
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <img>:
void img()
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af02      	add	r7, sp, #8
	if(y==1)
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <img+0x4c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d10a      	bne.n	8002870 <img+0x24>
	{
		//ST7735_FillScreen(ST7735_BLACK);
		ST7735_DrawImage(0, 0, 128, 128, (uint16_t*)test_img_128x128);
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <img+0x50>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	2100      	movs	r1, #0
 8002864:	2000      	movs	r0, #0
 8002866:	f001 f8e8 	bl	8003a3a <ST7735_DrawImage>
		y=0;
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <img+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002874:	480a      	ldr	r0, [pc, #40]	; (80028a0 <img+0x54>)
 8002876:	f001 fd93 	bl	80043a0 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d108      	bne.n	8002892 <img+0x46>
	    {
	    	//if (x==3)
	    	//{
	    		x=2;
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <img+0x58>)
 8002882:	2202      	movs	r2, #2
 8002884:	601a      	str	r2, [r3, #0]
	    	//}
	    	y=1;
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <img+0x4c>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
	    	HAL_Delay(50);
 800288c:	2032      	movs	r0, #50	; 0x32
 800288e:	f001 faf9 	bl	8003e84 <HAL_Delay>
	    }
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000000c 	.word	0x2000000c
 800289c:	08006fc0 	.word	0x08006fc0
 80028a0:	40020800 	.word	0x40020800
 80028a4:	20000008 	.word	0x20000008

080028a8 <MainScreen>:

void MainScreen()
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	; 0x30
 80028ac:	af04      	add	r7, sp, #16
	int d;
	int f;
	int c;

	char a[7];
	if(y==1)
 80028ae:	4b86      	ldr	r3, [pc, #536]	; (8002ac8 <MainScreen+0x220>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d16a      	bne.n	800298c <MainScreen+0xe4>
	{
		ST7735_FillScreen(ST7735_BLACK);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f001 f8ae 	bl	8003a18 <ST7735_FillScreen>
		ST7735_FillRectangle(0, 20, 128, 2, ST7735_RED);
 80028bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2302      	movs	r3, #2
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	2114      	movs	r1, #20
 80028c8:	2000      	movs	r0, #0
 80028ca:	f001 f831 	bl	8003930 <ST7735_FillRectangle>
		ST7735_WriteString(2, 2, "10:30", Font_11x18, ST7735_RED, ST7735_BLACK);
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <MainScreen+0x224>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	9202      	str	r2, [sp, #8]
 80028d4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028d8:	9201      	str	r2, [sp, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a7b      	ldr	r2, [pc, #492]	; (8002ad0 <MainScreen+0x228>)
 80028e2:	2102      	movs	r1, #2
 80028e4:	2002      	movs	r0, #2
 80028e6:	f000 ffd8 	bl	800389a <ST7735_WriteString>
		ST7735_WriteString(80, 2, "15*C", Font_11x18, ST7735_RED, ST7735_BLACK);
 80028ea:	4b78      	ldr	r3, [pc, #480]	; (8002acc <MainScreen+0x224>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	9202      	str	r2, [sp, #8]
 80028f0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028f4:	9201      	str	r2, [sp, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	9200      	str	r2, [sp, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <MainScreen+0x22c>)
 80028fe:	2102      	movs	r1, #2
 8002900:	2050      	movs	r0, #80	; 0x50
 8002902:	f000 ffca 	bl	800389a <ST7735_WriteString>
		ST7735_FillRectangle(0, 135, 128, 2, ST7735_RED);
 8002906:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2302      	movs	r3, #2
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	2187      	movs	r1, #135	; 0x87
 8002912:	2000      	movs	r0, #0
 8002914:	f001 f80c 	bl	8003930 <ST7735_FillRectangle>
		fuelicon(2, 140, ST7735_RED);
 8002918:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800291c:	218c      	movs	r1, #140	; 0x8c
 800291e:	2002      	movs	r0, #2
 8002920:	f7ff fea6 	bl	8002670 <fuelicon>
		frame(20, 140, 102, 15, ST7735_RED);
 8002924:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	230f      	movs	r3, #15
 800292c:	2266      	movs	r2, #102	; 0x66
 800292e:	218c      	movs	r1, #140	; 0x8c
 8002930:	2014      	movs	r0, #20
 8002932:	f7ff feff 	bl	8002734 <frame>
		for (i=0; i<4; i++)
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e019      	b.n	8002970 <MainScreen+0xc8>
			{
				d=i*20;
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	617b      	str	r3, [r7, #20]
				ST7735_WriteString(2, 25+d, "test", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	b29b      	uxth	r3, r3
 800294c:	3319      	adds	r3, #25
 800294e:	b299      	uxth	r1, r3
 8002950:	4b5e      	ldr	r3, [pc, #376]	; (8002acc <MainScreen+0x224>)
 8002952:	2200      	movs	r2, #0
 8002954:	9202      	str	r2, [sp, #8]
 8002956:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800295a:	9201      	str	r2, [sp, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	9200      	str	r2, [sp, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a5d      	ldr	r2, [pc, #372]	; (8002ad8 <MainScreen+0x230>)
 8002964:	2002      	movs	r0, #2
 8002966:	f000 ff98 	bl	800389a <ST7735_WriteString>
		for (i=0; i<4; i++)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b03      	cmp	r3, #3
 8002974:	dde2      	ble.n	800293c <MainScreen+0x94>
			}
		//f=10*z;
		//frame(60, 50, f, f, ST7735_RED);
		LastTimerCounter=htim1.Instance->CNT;
 8002976:	4b59      	ldr	r3, [pc, #356]	; (8002adc <MainScreen+0x234>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	b29a      	uxth	r2, r3
 800297e:	4b58      	ldr	r3, [pc, #352]	; (8002ae0 <MainScreen+0x238>)
 8002980:	801a      	strh	r2, [r3, #0]
		c=1;
 8002982:	2301      	movs	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
		y=0;
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <MainScreen+0x220>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
	}


		int TimerDif = htim1.Instance->CNT - LastTimerCounter;
 800298c:	4b53      	ldr	r3, [pc, #332]	; (8002adc <MainScreen+0x234>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <MainScreen+0x238>)
 8002994:	8812      	ldrh	r2, [r2, #0]
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	613b      	str	r3, [r7, #16]
		if(TimerDif >= 4 || TimerDif <= -4)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b03      	cmp	r3, #3
 800299e:	dc03      	bgt.n	80029a8 <MainScreen+0x100>
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f113 0f03 	cmn.w	r3, #3
 80029a6:	da23      	bge.n	80029f0 <MainScreen+0x148>
		{
			TimerDif /= 4;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da00      	bge.n	80029b0 <MainScreen+0x108>
 80029ae:	3303      	adds	r3, #3
 80029b0:	109b      	asrs	r3, r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
			p += (int8_t)TimerDif;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <MainScreen+0x23c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a48      	ldr	r2, [pc, #288]	; (8002ae4 <MainScreen+0x23c>)
 80029c2:	6013      	str	r3, [r2, #0]
			if(p > 10) p = 10;
 80029c4:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <MainScreen+0x23c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b0a      	cmp	r3, #10
 80029ca:	dd02      	ble.n	80029d2 <MainScreen+0x12a>
 80029cc:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <MainScreen+0x23c>)
 80029ce:	220a      	movs	r2, #10
 80029d0:	601a      	str	r2, [r3, #0]
			if(p < 0) p = 0;
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <MainScreen+0x23c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da02      	bge.n	80029e0 <MainScreen+0x138>
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <MainScreen+0x23c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
			LastTimerCounter = htim1.Instance->CNT;
 80029e0:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <MainScreen+0x234>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <MainScreen+0x238>)
 80029ea:	801a      	strh	r2, [r3, #0]
			c=1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
		}


	if (p<10)
 80029f0:	4b3c      	ldr	r3, [pc, #240]	; (8002ae4 <MainScreen+0x23c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b09      	cmp	r3, #9
 80029f6:	dc07      	bgt.n	8002a08 <MainScreen+0x160>
	{
		ST7735_FillRectangle(70, 26, 12, 14, ST7735_BLACK);
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	230e      	movs	r3, #14
 80029fe:	220c      	movs	r2, #12
 8002a00:	211a      	movs	r1, #26
 8002a02:	2046      	movs	r0, #70	; 0x46
 8002a04:	f000 ff94 	bl	8003930 <ST7735_FillRectangle>
	}
	if (p<100)
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <MainScreen+0x23c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b63      	cmp	r3, #99	; 0x63
 8002a0e:	dc07      	bgt.n	8002a20 <MainScreen+0x178>
		{
			ST7735_FillRectangle(82, 26, 12, 14, ST7735_BLACK);
 8002a10:	2300      	movs	r3, #0
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	230e      	movs	r3, #14
 8002a16:	220c      	movs	r2, #12
 8002a18:	211a      	movs	r1, #26
 8002a1a:	2052      	movs	r0, #82	; 0x52
 8002a1c:	f000 ff88 	bl	8003930 <ST7735_FillRectangle>
		}
	itoa(p, a, 10);
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <MainScreen+0x23c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1d39      	adds	r1, r7, #4
 8002a26:	220a      	movs	r2, #10
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 f989 	bl	8005d40 <itoa>
	ST7735_WriteString(60, 25, a, Font_11x18, ST7735_RED, ST7735_BLACK);
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <MainScreen+0x224>)
 8002a30:	1d39      	adds	r1, r7, #4
 8002a32:	2200      	movs	r2, #0
 8002a34:	9202      	str	r2, [sp, #8]
 8002a36:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a3a:	9201      	str	r2, [sp, #4]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	9200      	str	r2, [sp, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	460a      	mov	r2, r1
 8002a44:	2119      	movs	r1, #25
 8002a46:	203c      	movs	r0, #60	; 0x3c
 8002a48:	f000 ff27 	bl	800389a <ST7735_WriteString>



	if (c==1) //Poziom paliwa
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d121      	bne.n	8002a96 <MainScreen+0x1ee>
	{
		f=10*p;
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <MainScreen+0x23c>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
		box(21+f, 141, 100-f, 14, ST7735_BLACK);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3315      	adds	r3, #21
 8002a66:	b298      	uxth	r0, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	230e      	movs	r3, #14
 8002a78:	218d      	movs	r1, #141	; 0x8d
 8002a7a:	f7ff feb1 	bl	80027e0 <box>
		box(21, 141, f, 14, ST7735_RED);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	230e      	movs	r3, #14
 8002a8a:	218d      	movs	r1, #141	; 0x8d
 8002a8c:	2015      	movs	r0, #21
 8002a8e:	f7ff fea7 	bl	80027e0 <box>

		c=0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
	}
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a9a:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <MainScreen+0x240>)
 8002a9c:	f001 fc80 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <MainScreen+0x218>
	    {
	    	if (x==1)
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <MainScreen+0x244>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <MainScreen+0x20c>
	    	{
	    		x=2;
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <MainScreen+0x244>)
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	601a      	str	r2, [r3, #0]
	    	}
	    	y=1;
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <MainScreen+0x220>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
	    	HAL_Delay(20);
 8002aba:	2014      	movs	r0, #20
 8002abc:	f001 f9e2 	bl	8003e84 <HAL_Delay>
	    }
}
 8002ac0:	bf00      	nop
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	08006218 	.word	0x08006218
 8002ad4:	08006220 	.word	0x08006220
 8002ad8:	08006228 	.word	0x08006228
 8002adc:	2000004c 	.word	0x2000004c
 8002ae0:	20000040 	.word	0x20000040
 8002ae4:	20000014 	.word	0x20000014
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	20000008 	.word	0x20000008

08002af0 <Menu>:
void Menu()
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af04      	add	r7, sp, #16

	int m;

	if(y==1)
 8002af6:	4ba6      	ldr	r3, [pc, #664]	; (8002d90 <Menu+0x2a0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d15f      	bne.n	8002bbe <Menu+0xce>
		{
			ST7735_FillScreen(ST7735_BLACK);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 ff8a 	bl	8003a18 <ST7735_FillScreen>
			ST7735_FillRectangle(0, 20, 128, 2, ST7735_RED);
 8002b04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	2114      	movs	r1, #20
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 ff0d 	bl	8003930 <ST7735_FillRectangle>
			ST7735_WriteString(2, 2, "Menu", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002b16:	4b9f      	ldr	r3, [pc, #636]	; (8002d94 <Menu+0x2a4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	9202      	str	r2, [sp, #8]
 8002b1c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b20:	9201      	str	r2, [sp, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	9200      	str	r2, [sp, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a9b      	ldr	r2, [pc, #620]	; (8002d98 <Menu+0x2a8>)
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f000 feb4 	bl	800389a <ST7735_WriteString>
			ST7735_WriteString(5, 25, "Diagnostyka", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002b32:	4b98      	ldr	r3, [pc, #608]	; (8002d94 <Menu+0x2a4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	9202      	str	r2, [sp, #8]
 8002b38:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	9200      	str	r2, [sp, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a95      	ldr	r2, [pc, #596]	; (8002d9c <Menu+0x2ac>)
 8002b46:	2119      	movs	r1, #25
 8002b48:	2005      	movs	r0, #5
 8002b4a:	f000 fea6 	bl	800389a <ST7735_WriteString>
			ST7735_WriteString(5, 45, "Ustawienia", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002b4e:	4b91      	ldr	r3, [pc, #580]	; (8002d94 <Menu+0x2a4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	9202      	str	r2, [sp, #8]
 8002b54:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b58:	9201      	str	r2, [sp, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	9200      	str	r2, [sp, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a8f      	ldr	r2, [pc, #572]	; (8002da0 <Menu+0x2b0>)
 8002b62:	212d      	movs	r1, #45	; 0x2d
 8002b64:	2005      	movs	r0, #5
 8002b66:	f000 fe98 	bl	800389a <ST7735_WriteString>
			ST7735_WriteString(5, 65, "Obrazek", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002b6a:	4b8a      	ldr	r3, [pc, #552]	; (8002d94 <Menu+0x2a4>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	9202      	str	r2, [sp, #8]
 8002b70:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b74:	9201      	str	r2, [sp, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a89      	ldr	r2, [pc, #548]	; (8002da4 <Menu+0x2b4>)
 8002b7e:	2141      	movs	r1, #65	; 0x41
 8002b80:	2005      	movs	r0, #5
 8002b82:	f000 fe8a 	bl	800389a <ST7735_WriteString>
			ST7735_WriteString(5, 85, "Ekran gl.", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002b86:	4b83      	ldr	r3, [pc, #524]	; (8002d94 <Menu+0x2a4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	9202      	str	r2, [sp, #8]
 8002b8c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b90:	9201      	str	r2, [sp, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	9200      	str	r2, [sp, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a83      	ldr	r2, [pc, #524]	; (8002da8 <Menu+0x2b8>)
 8002b9a:	2155      	movs	r1, #85	; 0x55
 8002b9c:	2005      	movs	r0, #5
 8002b9e:	f000 fe7c 	bl	800389a <ST7735_WriteString>
			MenuLastTimerCounter=htim1.Instance->CNT;
 8002ba2:	4b82      	ldr	r3, [pc, #520]	; (8002dac <Menu+0x2bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <Menu+0x2c0>)
 8002bac:	801a      	strh	r2, [r3, #0]
			m=1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	607b      	str	r3, [r7, #4]
			z=1;
 8002bb2:	4b80      	ldr	r3, [pc, #512]	; (8002db4 <Menu+0x2c4>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
			y=0;
 8002bb8:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <Menu+0x2a0>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

		}



			int TimerDif = htim1.Instance->CNT - MenuLastTimerCounter;
 8002bbe:	4b7b      	ldr	r3, [pc, #492]	; (8002dac <Menu+0x2bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	4a7a      	ldr	r2, [pc, #488]	; (8002db0 <Menu+0x2c0>)
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	603b      	str	r3, [r7, #0]
			if(TimerDif >= 4 || TimerDif <= -4)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	dc03      	bgt.n	8002bda <Menu+0xea>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f113 0f03 	cmn.w	r3, #3
 8002bd8:	da23      	bge.n	8002c22 <Menu+0x132>
			{
				TimerDif /= 4;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da00      	bge.n	8002be2 <Menu+0xf2>
 8002be0:	3303      	adds	r3, #3
 8002be2:	109b      	asrs	r3, r3, #2
 8002be4:	603b      	str	r3, [r7, #0]
				z += (int8_t)TimerDif;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b71      	ldr	r3, [pc, #452]	; (8002db4 <Menu+0x2c4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <Menu+0x2c4>)
 8002bf4:	6013      	str	r3, [r2, #0]
				if(z > 4) z = 4;
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <Menu+0x2c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	dd02      	ble.n	8002c04 <Menu+0x114>
 8002bfe:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <Menu+0x2c4>)
 8002c00:	2204      	movs	r2, #4
 8002c02:	601a      	str	r2, [r3, #0]
				if(z < 1) z = 1;
 8002c04:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <Menu+0x2c4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	dc02      	bgt.n	8002c12 <Menu+0x122>
 8002c0c:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <Menu+0x2c4>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
				m=1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	607b      	str	r3, [r7, #4]
				MenuLastTimerCounter = htim1.Instance->CNT;
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <Menu+0x2bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <Menu+0x2c0>)
 8002c20:	801a      	strh	r2, [r3, #0]
			}
	switch (z)
 8002c22:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <Menu+0x2c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	f200 80cc 	bhi.w	8002dc6 <Menu+0x2d6>
 8002c2e:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <Menu+0x144>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c8b 	.word	0x08002c8b
 8002c3c:	08002ced 	.word	0x08002ced
 8002c40:	08002d4d 	.word	0x08002d4d
	    {
	    	case 1:			//Diagnostyka
	    	{
	    		if (m==1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	f040 80b6 	bne.w	8002db8 <Menu+0x2c8>
	    		{
	    			ST7735_WriteString(5, 45, "Ustawienia", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002c4c:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <Menu+0x2a4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	9202      	str	r2, [sp, #8]
 8002c52:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c56:	9201      	str	r2, [sp, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	9200      	str	r2, [sp, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <Menu+0x2b0>)
 8002c60:	212d      	movs	r1, #45	; 0x2d
 8002c62:	2005      	movs	r0, #5
 8002c64:	f000 fe19 	bl	800389a <ST7735_WriteString>
	    			ST7735_WriteString(5, 25, "Diagnostyka", Font_11x18, ST7735_BLACK, ST7735_RED);
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <Menu+0x2a4>)
 8002c6a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	9201      	str	r2, [sp, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	9200      	str	r2, [sp, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <Menu+0x2ac>)
 8002c7c:	2119      	movs	r1, #25
 8002c7e:	2005      	movs	r0, #5
 8002c80:	f000 fe0b 	bl	800389a <ST7735_WriteString>
	    			m=0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
	    		}

	    		break;
 8002c88:	e096      	b.n	8002db8 <Menu+0x2c8>
	    	}
	    	case 2:			//Ustawienia
	    	{
	    		if (m==1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 8095 	bne.w	8002dbc <Menu+0x2cc>
	    		{
	    			ST7735_WriteString(5, 25, "Diagnostyka", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <Menu+0x2a4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	9202      	str	r2, [sp, #8]
 8002c98:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c9c:	9201      	str	r2, [sp, #4]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	9200      	str	r2, [sp, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <Menu+0x2ac>)
 8002ca6:	2119      	movs	r1, #25
 8002ca8:	2005      	movs	r0, #5
 8002caa:	f000 fdf6 	bl	800389a <ST7735_WriteString>
	    			ST7735_WriteString(5, 65, "Obrazek", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002cae:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <Menu+0x2a4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	9202      	str	r2, [sp, #8]
 8002cb4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002cb8:	9201      	str	r2, [sp, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	9200      	str	r2, [sp, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <Menu+0x2b4>)
 8002cc2:	2141      	movs	r1, #65	; 0x41
 8002cc4:	2005      	movs	r0, #5
 8002cc6:	f000 fde8 	bl	800389a <ST7735_WriteString>
	    			ST7735_WriteString(5, 45, "Ustawienia", Font_11x18, ST7735_BLACK, ST7735_RED);
 8002cca:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <Menu+0x2a4>)
 8002ccc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002cd0:	9202      	str	r2, [sp, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a30      	ldr	r2, [pc, #192]	; (8002da0 <Menu+0x2b0>)
 8002cde:	212d      	movs	r1, #45	; 0x2d
 8002ce0:	2005      	movs	r0, #5
 8002ce2:	f000 fdda 	bl	800389a <ST7735_WriteString>
	    			m=0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
	    			    		}
	    		break;
 8002cea:	e067      	b.n	8002dbc <Menu+0x2cc>
	    	}
	    	case 3:			//Obrazek
	    	{
	    		if (m==1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d166      	bne.n	8002dc0 <Menu+0x2d0>
	    		{
	    			ST7735_WriteString(5, 45, "Ustawienia", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <Menu+0x2a4>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	9202      	str	r2, [sp, #8]
 8002cf8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002cfc:	9201      	str	r2, [sp, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	9200      	str	r2, [sp, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <Menu+0x2b0>)
 8002d06:	212d      	movs	r1, #45	; 0x2d
 8002d08:	2005      	movs	r0, #5
 8002d0a:	f000 fdc6 	bl	800389a <ST7735_WriteString>
   					ST7735_WriteString(5, 85, "Ekran gl.", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <Menu+0x2a4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	9202      	str	r2, [sp, #8]
 8002d14:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002d18:	9201      	str	r2, [sp, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	9200      	str	r2, [sp, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <Menu+0x2b8>)
 8002d22:	2155      	movs	r1, #85	; 0x55
 8002d24:	2005      	movs	r0, #5
 8002d26:	f000 fdb8 	bl	800389a <ST7735_WriteString>
	    			ST7735_WriteString(5, 65, "Obrazek", Font_11x18, ST7735_BLACK, ST7735_RED);
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <Menu+0x2a4>)
 8002d2c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002d30:	9202      	str	r2, [sp, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	9201      	str	r2, [sp, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	9200      	str	r2, [sp, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <Menu+0x2b4>)
 8002d3e:	2141      	movs	r1, #65	; 0x41
 8002d40:	2005      	movs	r0, #5
 8002d42:	f000 fdaa 	bl	800389a <ST7735_WriteString>
	    			m=0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
	    		}
	    	    break;
 8002d4a:	e039      	b.n	8002dc0 <Menu+0x2d0>
	    	}
	    	case 4:			//Ekran główny
	    	{
	    		if (m==1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d138      	bne.n	8002dc4 <Menu+0x2d4>
	    		{
	    			ST7735_WriteString(5, 65, "Obrazek", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <Menu+0x2a4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	9202      	str	r2, [sp, #8]
 8002d58:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002d5c:	9201      	str	r2, [sp, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	9200      	str	r2, [sp, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <Menu+0x2b4>)
 8002d66:	2141      	movs	r1, #65	; 0x41
 8002d68:	2005      	movs	r0, #5
 8002d6a:	f000 fd96 	bl	800389a <ST7735_WriteString>
	    			ST7735_WriteString(5, 85, "Ekran gl.", Font_11x18, ST7735_BLACK, ST7735_RED);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <Menu+0x2a4>)
 8002d70:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002d74:	9202      	str	r2, [sp, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	9201      	str	r2, [sp, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	9200      	str	r2, [sp, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <Menu+0x2b8>)
 8002d82:	2155      	movs	r1, #85	; 0x55
 8002d84:	2005      	movs	r0, #5
 8002d86:	f000 fd88 	bl	800389a <ST7735_WriteString>
	    			m=0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
	    		}
	    	    break;
 8002d8e:	e019      	b.n	8002dc4 <Menu+0x2d4>
 8002d90:	2000000c 	.word	0x2000000c
 8002d94:	20000000 	.word	0x20000000
 8002d98:	08006230 	.word	0x08006230
 8002d9c:	08006238 	.word	0x08006238
 8002da0:	08006244 	.word	0x08006244
 8002da4:	08006250 	.word	0x08006250
 8002da8:	08006258 	.word	0x08006258
 8002dac:	2000004c 	.word	0x2000004c
 8002db0:	20000042 	.word	0x20000042
 8002db4:	20000010 	.word	0x20000010
	    		break;
 8002db8:	bf00      	nop
 8002dba:	e004      	b.n	8002dc6 <Menu+0x2d6>
	    		break;
 8002dbc:	bf00      	nop
 8002dbe:	e002      	b.n	8002dc6 <Menu+0x2d6>
	    	    break;
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <Menu+0x2d6>
	    	    break;
 8002dc4:	bf00      	nop
	    	}

	    }
	if (z==1 && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <Menu+0x388>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d110      	bne.n	8002df0 <Menu+0x300>
 8002dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd2:	482a      	ldr	r0, [pc, #168]	; (8002e7c <Menu+0x38c>)
 8002dd4:	f001 fae4 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d108      	bne.n	8002df0 <Menu+0x300>
	{
		x=4; //Diagnostyka
 8002dde:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <Menu+0x390>)
 8002de0:	2204      	movs	r2, #4
 8002de2:	601a      	str	r2, [r3, #0]
		y=1;
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <Menu+0x394>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
		HAL_Delay(20);
 8002dea:	2014      	movs	r0, #20
 8002dec:	f001 f84a 	bl	8003e84 <HAL_Delay>
	}
	if (z==2 && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <Menu+0x388>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d110      	bne.n	8002e1a <Menu+0x32a>
 8002df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dfc:	481f      	ldr	r0, [pc, #124]	; (8002e7c <Menu+0x38c>)
 8002dfe:	f001 facf 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <Menu+0x32a>
	{
		x=5; //Ustawienia
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <Menu+0x390>)
 8002e0a:	2205      	movs	r2, #5
 8002e0c:	601a      	str	r2, [r3, #0]
		y=1;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <Menu+0x394>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
		HAL_Delay(20);
 8002e14:	2014      	movs	r0, #20
 8002e16:	f001 f835 	bl	8003e84 <HAL_Delay>
	}
	if (z==3 && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <Menu+0x388>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d110      	bne.n	8002e44 <Menu+0x354>
 8002e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <Menu+0x38c>)
 8002e28:	f001 faba 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <Menu+0x354>
	{
		x=3; //Obrazek
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <Menu+0x390>)
 8002e34:	2203      	movs	r2, #3
 8002e36:	601a      	str	r2, [r3, #0]
		y=1;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <Menu+0x394>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
		HAL_Delay(20);
 8002e3e:	2014      	movs	r0, #20
 8002e40:	f001 f820 	bl	8003e84 <HAL_Delay>
	}
	if (z==4 && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <Menu+0x388>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d110      	bne.n	8002e6e <Menu+0x37e>
 8002e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e50:	480a      	ldr	r0, [pc, #40]	; (8002e7c <Menu+0x38c>)
 8002e52:	f001 faa5 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d108      	bne.n	8002e6e <Menu+0x37e>
	{
		x=1; //Ekran główny
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <Menu+0x390>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
		y=1;
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <Menu+0x394>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
		HAL_Delay(20);
 8002e68:	2014      	movs	r0, #20
 8002e6a:	f001 f80b 	bl	8003e84 <HAL_Delay>
	}
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000010 	.word	0x20000010
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	20000008 	.word	0x20000008
 8002e84:	2000000c 	.word	0x2000000c

08002e88 <Diagnostyka>:

void Diagnostyka()
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af04      	add	r7, sp, #16
	if(y==1)
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <Diagnostyka+0xa0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d134      	bne.n	8002f00 <Diagnostyka+0x78>
		{
			ST7735_FillScreen(ST7735_BLACK);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f000 fdbe 	bl	8003a18 <ST7735_FillScreen>
			ST7735_FillRectangle(0, 20, 128, 2, ST7735_RED);
 8002e9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	2114      	movs	r1, #20
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f000 fd41 	bl	8003930 <ST7735_FillRectangle>
			ST7735_WriteString(2, 2, "Diagnostyka", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <Diagnostyka+0xa4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	9202      	str	r2, [sp, #8]
 8002eb4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002eb8:	9201      	str	r2, [sp, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <Diagnostyka+0xa8>)
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	2002      	movs	r0, #2
 8002ec6:	f000 fce8 	bl	800389a <ST7735_WriteString>
			caricon(42, 35, ST7735_RED);
 8002eca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002ece:	2123      	movs	r1, #35	; 0x23
 8002ed0:	202a      	movs	r0, #42	; 0x2a
 8002ed2:	f7fd fb17 	bl	8000504 <caricon>
			Rcardooricon(85, 67, ST7735_RED);
 8002ed6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002eda:	2143      	movs	r1, #67	; 0x43
 8002edc:	2055      	movs	r0, #85	; 0x55
 8002ede:	f7ff fa05 	bl	80022ec <Rcardooricon>
			Lcardooricon(29, 67, ST7735_RED);
 8002ee2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002ee6:	2143      	movs	r1, #67	; 0x43
 8002ee8:	201d      	movs	r0, #29
 8002eea:	f7ff fadf 	bl	80024ac <Lcardooricon>
			fuelicon(2, 140, ST7735_RED);
 8002eee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002ef2:	218c      	movs	r1, #140	; 0x8c
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	f7ff fbbb 	bl	8002670 <fuelicon>
			y=0;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <Diagnostyka+0xa0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
			}
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f04:	480b      	ldr	r0, [pc, #44]	; (8002f34 <Diagnostyka+0xac>)
 8002f06:	f001 fa4b 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d108      	bne.n	8002f22 <Diagnostyka+0x9a>
			{
			   	x=2;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <Diagnostyka+0xb0>)
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
			   	y=1;
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <Diagnostyka+0xa0>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
			   	HAL_Delay(20);
 8002f1c:	2014      	movs	r0, #20
 8002f1e:	f000 ffb1 	bl	8003e84 <HAL_Delay>
			}
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	08006238 	.word	0x08006238
 8002f34:	40020800 	.word	0x40020800
 8002f38:	20000008 	.word	0x20000008

08002f3c <Ustawienia>:
void Ustawienia()
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af04      	add	r7, sp, #16
	if(y==1)
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <Ustawienia+0x70>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d11c      	bne.n	8002f84 <Ustawienia+0x48>
			{
				ST7735_FillScreen(ST7735_BLACK);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f000 fd64 	bl	8003a18 <ST7735_FillScreen>
				ST7735_FillRectangle(0, 20, 128, 2, ST7735_RED);
 8002f50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2302      	movs	r3, #2
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	2114      	movs	r1, #20
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f000 fce7 	bl	8003930 <ST7735_FillRectangle>
				ST7735_WriteString(2, 2, "Diagnostyka", Font_11x18, ST7735_RED, ST7735_BLACK);
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <Ustawienia+0x74>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	9202      	str	r2, [sp, #8]
 8002f68:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f6c:	9201      	str	r2, [sp, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <Ustawienia+0x78>)
 8002f76:	2102      	movs	r1, #2
 8002f78:	2002      	movs	r0, #2
 8002f7a:	f000 fc8e 	bl	800389a <ST7735_WriteString>
				y=0;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <Ustawienia+0x70>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
			}
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <Ustawienia+0x7c>)
 8002f8a:	f001 fa09 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <Ustawienia+0x6a>
			{
			   	x=2;
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <Ustawienia+0x80>)
 8002f96:	2202      	movs	r2, #2
 8002f98:	601a      	str	r2, [r3, #0]
			   	y=1;
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <Ustawienia+0x70>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
			   	HAL_Delay(20);
 8002fa0:	2014      	movs	r0, #20
 8002fa2:	f000 ff6f 	bl	8003e84 <HAL_Delay>
			}
}
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000000c 	.word	0x2000000c
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	08006238 	.word	0x08006238
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	20000008 	.word	0x20000008

08002fc0 <Doors>:
void Doors()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af02      	add	r7, sp, #8
	if(y==1)
 8002fc6:	4b39      	ldr	r3, [pc, #228]	; (80030ac <Doors+0xec>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d110      	bne.n	8002ff0 <Doors+0x30>
	{
		ST7735_DrawImage(0, 22, 128, 113, (uint16_t*)black_img_128x128);
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <Doors+0xf0>)
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2371      	movs	r3, #113	; 0x71
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	2116      	movs	r1, #22
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f000 fd2e 	bl	8003a3a <ST7735_DrawImage>
		caricon(42, 31, ST7735_RED);
 8002fde:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002fe2:	211f      	movs	r1, #31
 8002fe4:	202a      	movs	r0, #42	; 0x2a
 8002fe6:	f7fd fa8d 	bl	8000504 <caricon>
		y=0;
 8002fea:	4b30      	ldr	r3, [pc, #192]	; (80030ac <Doors+0xec>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
	}
		if (HAL_GPIO_ReadPin(LFDoor_GPIO_Port, LFDoor_Pin) == GPIO_PIN_RESET) //Drzwi lewy przód
 8002ff0:	2110      	movs	r1, #16
 8002ff2:	4830      	ldr	r0, [pc, #192]	; (80030b4 <Doors+0xf4>)
 8002ff4:	f001 f9d4 	bl	80043a0 <HAL_GPIO_ReadPin>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <Doors+0x52>
		{
			Lcardooricon(29, 63, ST7735_RED);
 8002ffe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003002:	213f      	movs	r1, #63	; 0x3f
 8003004:	201d      	movs	r0, #29
 8003006:	f7ff fa51 	bl	80024ac <Lcardooricon>
			HAL_Delay(20);
 800300a:	2014      	movs	r0, #20
 800300c:	f000 ff3a 	bl	8003e84 <HAL_Delay>
 8003010:	e004      	b.n	800301c <Doors+0x5c>
		}
		else
		{
			Lcardooricon(29, 63, ST7735_BLACK);
 8003012:	2200      	movs	r2, #0
 8003014:	213f      	movs	r1, #63	; 0x3f
 8003016:	201d      	movs	r0, #29
 8003018:	f7ff fa48 	bl	80024ac <Lcardooricon>
		}
		if (HAL_GPIO_ReadPin(RFDoor_GPIO_Port, RFDoor_Pin) == GPIO_PIN_RESET) //Drzwi prawy przód
 800301c:	2120      	movs	r1, #32
 800301e:	4825      	ldr	r0, [pc, #148]	; (80030b4 <Doors+0xf4>)
 8003020:	f001 f9be 	bl	80043a0 <HAL_GPIO_ReadPin>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <Doors+0x7e>
		{
			Rcardooricon(85, 63, ST7735_RED);
 800302a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800302e:	213f      	movs	r1, #63	; 0x3f
 8003030:	2055      	movs	r0, #85	; 0x55
 8003032:	f7ff f95b 	bl	80022ec <Rcardooricon>
			HAL_Delay(20);
 8003036:	2014      	movs	r0, #20
 8003038:	f000 ff24 	bl	8003e84 <HAL_Delay>
 800303c:	e004      	b.n	8003048 <Doors+0x88>
		}
		else
		{
			Rcardooricon(85, 63, ST7735_BLACK);
 800303e:	2200      	movs	r2, #0
 8003040:	213f      	movs	r1, #63	; 0x3f
 8003042:	2055      	movs	r0, #85	; 0x55
 8003044:	f7ff f952 	bl	80022ec <Rcardooricon>
		}
		if (HAL_GPIO_ReadPin(LRDoor_GPIO_Port, LRDoor_Pin) == GPIO_PIN_RESET) //Drzwi lewy tył
 8003048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800304c:	4819      	ldr	r0, [pc, #100]	; (80030b4 <Doors+0xf4>)
 800304e:	f001 f9a7 	bl	80043a0 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <Doors+0xac>
		{
			Lcardooricon(29, 85, ST7735_RED);
 8003058:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800305c:	2155      	movs	r1, #85	; 0x55
 800305e:	201d      	movs	r0, #29
 8003060:	f7ff fa24 	bl	80024ac <Lcardooricon>
			HAL_Delay(20);
 8003064:	2014      	movs	r0, #20
 8003066:	f000 ff0d 	bl	8003e84 <HAL_Delay>
 800306a:	e004      	b.n	8003076 <Doors+0xb6>
		}
		else
		{
			Lcardooricon(29, 85, ST7735_BLACK);
 800306c:	2200      	movs	r2, #0
 800306e:	2155      	movs	r1, #85	; 0x55
 8003070:	201d      	movs	r0, #29
 8003072:	f7ff fa1b 	bl	80024ac <Lcardooricon>
		}
		if (HAL_GPIO_ReadPin(RRDoor_GPIO_Port, RRDoor_Pin) == GPIO_PIN_RESET) //Drzwi prawy tył
 8003076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800307a:	480e      	ldr	r0, [pc, #56]	; (80030b4 <Doors+0xf4>)
 800307c:	f001 f990 	bl	80043a0 <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <Doors+0xda>
		{
			Rcardooricon(85, 85, ST7735_RED);
 8003086:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800308a:	2155      	movs	r1, #85	; 0x55
 800308c:	2055      	movs	r0, #85	; 0x55
 800308e:	f7ff f92d 	bl	80022ec <Rcardooricon>
			HAL_Delay(20);
 8003092:	2014      	movs	r0, #20
 8003094:	f000 fef6 	bl	8003e84 <HAL_Delay>
		{
			Rcardooricon(85, 85, ST7735_BLACK);
		}


}
 8003098:	e004      	b.n	80030a4 <Doors+0xe4>
			Rcardooricon(85, 85, ST7735_BLACK);
 800309a:	2200      	movs	r2, #0
 800309c:	2155      	movs	r1, #85	; 0x55
 800309e:	2055      	movs	r0, #85	; 0x55
 80030a0:	f7ff f924 	bl	80022ec <Rcardooricon>
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	0800efc0 	.word	0x0800efc0
 80030b4:	40020400 	.word	0x40020400

080030b8 <loop>:
void loop() {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
    // Check border

	if (HAL_GPIO_ReadPin(LFDoor_GPIO_Port, LFDoor_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(RFDoor_GPIO_Port, RFDoor_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(LRDoor_GPIO_Port, LRDoor_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(RRDoor_GPIO_Port, RRDoor_Pin) == GPIO_PIN_RESET)
 80030bc:	2110      	movs	r1, #16
 80030be:	4835      	ldr	r0, [pc, #212]	; (8003194 <loop+0xdc>)
 80030c0:	f001 f96e 	bl	80043a0 <HAL_GPIO_ReadPin>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <loop+0x40>
 80030ca:	2120      	movs	r1, #32
 80030cc:	4831      	ldr	r0, [pc, #196]	; (8003194 <loop+0xdc>)
 80030ce:	f001 f967 	bl	80043a0 <HAL_GPIO_ReadPin>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00f      	beq.n	80030f8 <loop+0x40>
 80030d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030dc:	482d      	ldr	r0, [pc, #180]	; (8003194 <loop+0xdc>)
 80030de:	f001 f95f 	bl	80043a0 <HAL_GPIO_ReadPin>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <loop+0x40>
 80030e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030ec:	4829      	ldr	r0, [pc, #164]	; (8003194 <loop+0xdc>)
 80030ee:	f001 f957 	bl	80043a0 <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d114      	bne.n	8003122 <loop+0x6a>
	{
		if (door2==0)
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <loop+0xe0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <loop+0x56>
		{
			door=x;
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <loop+0xe4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <loop+0xe8>)
 8003106:	6013      	str	r3, [r2, #0]
			y=1;
 8003108:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <loop+0xec>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
		}
	   	x=6;
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <loop+0xe4>)
 8003110:	2206      	movs	r2, #6
 8003112:	601a      	str	r2, [r3, #0]
	   	door2=1;
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <loop+0xe0>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]
	   	HAL_Delay(20);
 800311a:	2014      	movs	r0, #20
 800311c:	f000 feb2 	bl	8003e84 <HAL_Delay>
 8003120:	e010      	b.n	8003144 <loop+0x8c>
	}
	else
	{
		if (door2==1){
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <loop+0xe0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10c      	bne.n	8003144 <loop+0x8c>
			x=door;
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <loop+0xe8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <loop+0xe4>)
 8003130:	6013      	str	r3, [r2, #0]
			door2=0;
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <loop+0xe0>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
			y=1;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <loop+0xec>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
			HAL_Delay(100);
 800313e:	2064      	movs	r0, #100	; 0x64
 8003140:	f000 fea0 	bl	8003e84 <HAL_Delay>
		}
	}
    switch (x)
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <loop+0xe4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3b01      	subs	r3, #1
 800314a:	2b05      	cmp	r3, #5
 800314c:	d820      	bhi.n	8003190 <loop+0xd8>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <loop+0x9c>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	0800316d 	.word	0x0800316d
 8003158:	08003173 	.word	0x08003173
 800315c:	08003179 	.word	0x08003179
 8003160:	0800317f 	.word	0x0800317f
 8003164:	08003185 	.word	0x08003185
 8003168:	0800318b 	.word	0x0800318b
    {
    	case 1:
    	{
    		MainScreen();
 800316c:	f7ff fb9c 	bl	80028a8 <MainScreen>
    		break;
 8003170:	e00e      	b.n	8003190 <loop+0xd8>
    	}
    	case 2:
    	{
    		Menu();
 8003172:	f7ff fcbd 	bl	8002af0 <Menu>
    		break;
 8003176:	e00b      	b.n	8003190 <loop+0xd8>
    	}
    	case 3:
    	{
    	    img();
 8003178:	f7ff fb68 	bl	800284c <img>
    	    break;
 800317c:	e008      	b.n	8003190 <loop+0xd8>
    	}
    	case 4:
    	{
    	    Ustawienia();
 800317e:	f7ff fedd 	bl	8002f3c <Ustawienia>
    	    break;
 8003182:	e005      	b.n	8003190 <loop+0xd8>
    	   	}
    	case 5:
    	{
    	    Diagnostyka();
 8003184:	f7ff fe80 	bl	8002e88 <Diagnostyka>
    	    break;
 8003188:	e002      	b.n	8003190 <loop+0xd8>
    	}
    	case 6:
    	{
    		Doors();
 800318a:	f7ff ff19 	bl	8002fc0 <Doors>
    		break;
 800318e:	bf00      	nop
    	}
    }
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40020400 	.word	0x40020400
 8003198:	20000048 	.word	0x20000048
 800319c:	20000008 	.word	0x20000008
 80031a0:	20000044 	.word	0x20000044
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ac:	f000 fdf8 	bl	8003da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031b0:	f000 f814 	bl	80031dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b4:	f000 f936 	bl	8003424 <MX_GPIO_Init>
  MX_SPI1_Init();
 80031b8:	f000 f87a 	bl	80032b0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80031bc:	f000 f908 	bl	80033d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80031c0:	f000 f8ae 	bl	8003320 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80031c4:	213c      	movs	r1, #60	; 0x3c
 80031c6:	4804      	ldr	r0, [pc, #16]	; (80031d8 <main+0x30>)
 80031c8:	f002 f8c6 	bl	8005358 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 80031cc:	f7fd f980 	bl	80004d0 <init>
  while (1)
  {
    loop();
 80031d0:	f7ff ff72 	bl	80030b8 <loop>
 80031d4:	e7fc      	b.n	80031d0 <main+0x28>
 80031d6:	bf00      	nop
 80031d8:	2000004c 	.word	0x2000004c

080031dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b094      	sub	sp, #80	; 0x50
 80031e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031e2:	f107 0320 	add.w	r3, r7, #32
 80031e6:	2230      	movs	r2, #48	; 0x30
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fdb8 	bl	8005d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <SystemClock_Config+0xcc>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <SystemClock_Config+0xcc>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <SystemClock_Config+0xcc>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800321c:	2300      	movs	r3, #0
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <SystemClock_Config+0xd0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a21      	ldr	r2, [pc, #132]	; (80032ac <SystemClock_Config+0xd0>)
 8003226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <SystemClock_Config+0xd0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003238:	2302      	movs	r3, #2
 800323a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800323c:	2301      	movs	r3, #1
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003240:	2310      	movs	r3, #16
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003244:	2302      	movs	r3, #2
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800324c:	2310      	movs	r3, #16
 800324e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003250:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003256:	2304      	movs	r3, #4
 8003258:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800325a:	2304      	movs	r3, #4
 800325c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800325e:	f107 0320 	add.w	r3, r7, #32
 8003262:	4618      	mov	r0, r3
 8003264:	f001 f8ce 	bl	8004404 <HAL_RCC_OscConfig>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800326e:	f000 f96b 	bl	8003548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003272:	230f      	movs	r3, #15
 8003274:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003276:	2302      	movs	r3, #2
 8003278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800327e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fb30 	bl	80048f4 <HAL_RCC_ClockConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800329a:	f000 f955 	bl	8003548 <Error_Handler>
  }
}
 800329e:	bf00      	nop
 80032a0:	3750      	adds	r7, #80	; 0x50
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40007000 	.word	0x40007000

080032b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <MX_SPI1_Init+0x68>)
 80032b6:	4a19      	ldr	r2, [pc, #100]	; (800331c <MX_SPI1_Init+0x6c>)
 80032b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <MX_SPI1_Init+0x68>)
 80032bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <MX_SPI1_Init+0x68>)
 80032c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <MX_SPI1_Init+0x68>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <MX_SPI1_Init+0x68>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <MX_SPI1_Init+0x68>)
 80032d8:	2200      	movs	r2, #0
 80032da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <MX_SPI1_Init+0x68>)
 80032de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <MX_SPI1_Init+0x68>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <MX_SPI1_Init+0x68>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <MX_SPI1_Init+0x68>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <MX_SPI1_Init+0x68>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <MX_SPI1_Init+0x68>)
 80032fe:	220a      	movs	r2, #10
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <MX_SPI1_Init+0x68>)
 8003304:	f001 fcf2 	bl	8004cec <HAL_SPI_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800330e:	f000 f91b 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000094 	.word	0x20000094
 800331c:	40013000 	.word	0x40013000

08003320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	; 0x30
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003326:	f107 030c 	add.w	r3, r7, #12
 800332a:	2224      	movs	r2, #36	; 0x24
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fd16 	bl	8005d60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <MX_TIM1_Init+0xa8>)
 800333e:	4a23      	ldr	r2, [pc, #140]	; (80033cc <MX_TIM1_Init+0xac>)
 8003340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003342:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <MX_TIM1_Init+0xa8>)
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <MX_TIM1_Init+0xa8>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800334e:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <MX_TIM1_Init+0xa8>)
 8003350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <MX_TIM1_Init+0xa8>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <MX_TIM1_Init+0xa8>)
 800335e:	2200      	movs	r2, #0
 8003360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003362:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <MX_TIM1_Init+0xa8>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003368:	2303      	movs	r3, #3
 800336a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800336c:	2300      	movs	r3, #0
 800336e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003370:	2301      	movs	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003378:	230f      	movs	r3, #15
 800337a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800337c:	2300      	movs	r3, #0
 800337e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003380:	2301      	movs	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003384:	2300      	movs	r3, #0
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8003388:	230f      	movs	r3, #15
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	4619      	mov	r1, r3
 8003392:	480d      	ldr	r0, [pc, #52]	; (80033c8 <MX_TIM1_Init+0xa8>)
 8003394:	f001 ff3a 	bl	800520c <HAL_TIM_Encoder_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800339e:	f000 f8d3 	bl	8003548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4806      	ldr	r0, [pc, #24]	; (80033c8 <MX_TIM1_Init+0xa8>)
 80033b0:	f002 f906 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80033ba:	f000 f8c5 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80033be:	bf00      	nop
 80033c0:	3730      	adds	r7, #48	; 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	2000004c 	.word	0x2000004c
 80033cc:	40010000 	.word	0x40010000

080033d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <MX_USART2_UART_Init+0x50>)
 80033d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033f6:	220c      	movs	r2, #12
 80033f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <MX_USART2_UART_Init+0x4c>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003406:	4805      	ldr	r0, [pc, #20]	; (800341c <MX_USART2_UART_Init+0x4c>)
 8003408:	f002 f948 	bl	800569c <HAL_UART_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003412:	f000 f899 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200000ec 	.word	0x200000ec
 8003420:	40004400 	.word	0x40004400

08003424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342a:	f107 0314 	add.w	r3, r7, #20
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	4b3f      	ldr	r3, [pc, #252]	; (800353c <MX_GPIO_Init+0x118>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a3e      	ldr	r2, [pc, #248]	; (800353c <MX_GPIO_Init+0x118>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b3c      	ldr	r3, [pc, #240]	; (800353c <MX_GPIO_Init+0x118>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <MX_GPIO_Init+0x118>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a37      	ldr	r2, [pc, #220]	; (800353c <MX_GPIO_Init+0x118>)
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b35      	ldr	r3, [pc, #212]	; (800353c <MX_GPIO_Init+0x118>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b31      	ldr	r3, [pc, #196]	; (800353c <MX_GPIO_Init+0x118>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4a30      	ldr	r2, [pc, #192]	; (800353c <MX_GPIO_Init+0x118>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4b2e      	ldr	r3, [pc, #184]	; (800353c <MX_GPIO_Init+0x118>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	4b2a      	ldr	r3, [pc, #168]	; (800353c <MX_GPIO_Init+0x118>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <MX_GPIO_Init+0x118>)
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b27      	ldr	r3, [pc, #156]	; (800353c <MX_GPIO_Init+0x118>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	4824      	ldr	r0, [pc, #144]	; (8003540 <MX_GPIO_Init+0x11c>)
 80034b0:	f000 ff8e 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80034ba:	4822      	ldr	r0, [pc, #136]	; (8003544 <MX_GPIO_Init+0x120>)
 80034bc:	f000 ff88 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	4619      	mov	r1, r3
 80034d6:	481a      	ldr	r0, [pc, #104]	; (8003540 <MX_GPIO_Init+0x11c>)
 80034d8:	f000 fdde 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : RRDoor_Pin LRDoor_Pin LFDoor_Pin RFDoor_Pin */
  GPIO_InitStruct.Pin = RRDoor_Pin|LRDoor_Pin|LFDoor_Pin|RFDoor_Pin;
 80034dc:	f245 0330 	movw	r3, #20528	; 0x5030
 80034e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4619      	mov	r1, r3
 80034f2:	4814      	ldr	r0, [pc, #80]	; (8003544 <MX_GPIO_Init+0x120>)
 80034f4:	f000 fdd0 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fc:	2301      	movs	r3, #1
 80034fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	4619      	mov	r1, r3
 800350e:	480c      	ldr	r0, [pc, #48]	; (8003540 <MX_GPIO_Init+0x11c>)
 8003510:	f000 fdc2 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003514:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351a:	2301      	movs	r3, #1
 800351c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	4619      	mov	r1, r3
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <MX_GPIO_Init+0x120>)
 800352e:	f000 fdb3 	bl	8004098 <HAL_GPIO_Init>

}
 8003532:	bf00      	nop
 8003534:	3728      	adds	r7, #40	; 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40020800 	.word	0x40020800
 8003544:	40020400 	.word	0x40020400

08003548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800354c:	e7fe      	b.n	800354c <Error_Handler+0x4>
	...

08003550 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8003554:	2200      	movs	r2, #0
 8003556:	2140      	movs	r1, #64	; 0x40
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <ST7735_Select+0x14>)
 800355a:	f000 ff39 	bl	80043d0 <HAL_GPIO_WritePin>
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40020400 	.word	0x40020400

08003568 <ST7735_Unselect>:

void ST7735_Unselect() {
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800356c:	2201      	movs	r2, #1
 800356e:	2140      	movs	r1, #64	; 0x40
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <ST7735_Unselect+0x14>)
 8003572:	f000 ff2d 	bl	80043d0 <HAL_GPIO_WritePin>
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40020400 	.word	0x40020400

08003580 <ST7735_Reset>:

static void ST7735_Reset() {
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	4806      	ldr	r0, [pc, #24]	; (80035a4 <ST7735_Reset+0x24>)
 800358a:	f000 ff21 	bl	80043d0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800358e:	2005      	movs	r0, #5
 8003590:	f000 fc78 	bl	8003e84 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8003594:	2201      	movs	r2, #1
 8003596:	2180      	movs	r1, #128	; 0x80
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <ST7735_Reset+0x24>)
 800359a:	f000 ff19 	bl	80043d0 <HAL_GPIO_WritePin>
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40020800 	.word	0x40020800

080035a8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80035b2:	2200      	movs	r2, #0
 80035b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035b8:	4806      	ldr	r0, [pc, #24]	; (80035d4 <ST7735_WriteCommand+0x2c>)
 80035ba:	f000 ff09 	bl	80043d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80035be:	1df9      	adds	r1, r7, #7
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	2201      	movs	r2, #1
 80035c6:	4804      	ldr	r0, [pc, #16]	; (80035d8 <ST7735_WriteCommand+0x30>)
 80035c8:	f001 fc19 	bl	8004dfe <HAL_SPI_Transmit>
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40020400 	.word	0x40020400
 80035d8:	20000094 	.word	0x20000094

080035dc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80035e6:	2201      	movs	r2, #1
 80035e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ec:	4807      	ldr	r0, [pc, #28]	; (800360c <ST7735_WriteData+0x30>)
 80035ee:	f000 feef 	bl	80043d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4804      	ldr	r0, [pc, #16]	; (8003610 <ST7735_WriteData+0x34>)
 80035fe:	f001 fbfe 	bl	8004dfe <HAL_SPI_Transmit>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40020400 	.word	0x40020400
 8003610:	20000094 	.word	0x20000094

08003614 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003626:	e034      	b.n	8003692 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ffb7 	bl	80035a8 <ST7735_WriteCommand>

        numArgs = *addr++;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003644:	7abb      	ldrb	r3, [r7, #10]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800364e:	7abb      	ldrb	r3, [r7, #10]
 8003650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003654:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003656:	7abb      	ldrb	r3, [r7, #10]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800365c:	7abb      	ldrb	r3, [r7, #10]
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ffbb 	bl	80035dc <ST7735_WriteData>
            addr += numArgs;
 8003666:	7abb      	ldrb	r3, [r7, #10]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800366e:	89bb      	ldrh	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800367e:	89bb      	ldrh	r3, [r7, #12]
 8003680:	2bff      	cmp	r3, #255	; 0xff
 8003682:	d102      	bne.n	800368a <ST7735_ExecuteCommandList+0x76>
 8003684:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003688:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800368a:	89bb      	ldrh	r3, [r7, #12]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fbf9 	bl	8003e84 <HAL_Delay>
    while(numCommands--) {
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	1e5a      	subs	r2, r3, #1
 8003696:	73fa      	strb	r2, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1c5      	bne.n	8003628 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80036a6:	b590      	push	{r4, r7, lr}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4604      	mov	r4, r0
 80036ae:	4608      	mov	r0, r1
 80036b0:	4611      	mov	r1, r2
 80036b2:	461a      	mov	r2, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	71fb      	strb	r3, [r7, #7]
 80036b8:	4603      	mov	r3, r0
 80036ba:	71bb      	strb	r3, [r7, #6]
 80036bc:	460b      	mov	r3, r1
 80036be:	717b      	strb	r3, [r7, #5]
 80036c0:	4613      	mov	r3, r2
 80036c2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80036c4:	202a      	movs	r0, #42	; 0x2a
 80036c6:	f7ff ff6f 	bl	80035a8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80036ca:	2300      	movs	r3, #0
 80036cc:	733b      	strb	r3, [r7, #12]
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	737b      	strb	r3, [r7, #13]
 80036d2:	2300      	movs	r3, #0
 80036d4:	73bb      	strb	r3, [r7, #14]
 80036d6:	797b      	ldrb	r3, [r7, #5]
 80036d8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	2104      	movs	r1, #4
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff7b 	bl	80035dc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80036e6:	202b      	movs	r0, #43	; 0x2b
 80036e8:	f7ff ff5e 	bl	80035a8 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80036ec:	79bb      	ldrb	r3, [r7, #6]
 80036ee:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80036f0:	793b      	ldrb	r3, [r7, #4]
 80036f2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	2104      	movs	r1, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ff6e 	bl	80035dc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003700:	202c      	movs	r0, #44	; 0x2c
 8003702:	f7ff ff51 	bl	80035a8 <ST7735_WriteCommand>
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bd90      	pop	{r4, r7, pc}
	...

08003710 <ST7735_Init>:

void ST7735_Init() {
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
    ST7735_Select();
 8003714:	f7ff ff1c 	bl	8003550 <ST7735_Select>
    ST7735_Reset();
 8003718:	f7ff ff32 	bl	8003580 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800371c:	4806      	ldr	r0, [pc, #24]	; (8003738 <ST7735_Init+0x28>)
 800371e:	f7ff ff79 	bl	8003614 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <ST7735_Init+0x2c>)
 8003724:	f7ff ff76 	bl	8003614 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8003728:	4805      	ldr	r0, [pc, #20]	; (8003740 <ST7735_Init+0x30>)
 800372a:	f7ff ff73 	bl	8003614 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800372e:	f7ff ff1b 	bl	8003568 <ST7735_Unselect>
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	08016fc0 	.word	0x08016fc0
 800373c:	08016ffc 	.word	0x08016ffc
 8003740:	0801700c 	.word	0x0801700c

08003744 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	80fb      	strh	r3, [r7, #6]
 800374e:	460b      	mov	r3, r1
 8003750:	80bb      	strh	r3, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b7f      	cmp	r3, #127	; 0x7f
 800375a:	d823      	bhi.n	80037a4 <ST7735_DrawPixel+0x60>
 800375c:	88bb      	ldrh	r3, [r7, #4]
 800375e:	2b9f      	cmp	r3, #159	; 0x9f
 8003760:	d820      	bhi.n	80037a4 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8003762:	f7ff fef5 	bl	8003550 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	b2d8      	uxtb	r0, r3
 800376a:	88bb      	ldrh	r3, [r7, #4]
 800376c:	b2d9      	uxtb	r1, r3
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3301      	adds	r3, #1
 8003774:	b2da      	uxtb	r2, r3
 8003776:	88bb      	ldrh	r3, [r7, #4]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	3301      	adds	r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f7ff ff92 	bl	80036a6 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	b29b      	uxth	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	733b      	strb	r3, [r7, #12]
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff1f 	bl	80035dc <ST7735_WriteData>

    ST7735_Unselect();
 800379e:	f7ff fee3 	bl	8003568 <ST7735_Unselect>
 80037a2:	e000      	b.n	80037a6 <ST7735_DrawPixel+0x62>
        return;
 80037a4:	bf00      	nop
}
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80037ac:	b082      	sub	sp, #8
 80037ae:	b590      	push	{r4, r7, lr}
 80037b0:	b089      	sub	sp, #36	; 0x24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
 80037ba:	460b      	mov	r3, r1
 80037bc:	80bb      	strh	r3, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	b2d8      	uxtb	r0, r3
 80037c6:	88bb      	ldrh	r3, [r7, #4]
 80037c8:	b2d9      	uxtb	r1, r3
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037d2:	4413      	add	r3, r2
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b2dc      	uxtb	r4, r3
 80037da:	88bb      	ldrh	r3, [r7, #4]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80037e2:	4413      	add	r3, r2
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	4622      	mov	r2, r4
 80037ec:	f7ff ff5b 	bl	80036a6 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	e043      	b.n	800387e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80037f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	3b20      	subs	r3, #32
 80037fc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4619      	mov	r1, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	440b      	add	r3, r1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	e029      	b.n	800386c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8003828:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	b29b      	uxth	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	743b      	strb	r3, [r7, #16]
 8003832:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003834:	b2db      	uxtb	r3, r3
 8003836:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8003838:	f107 0310 	add.w	r3, r7, #16
 800383c:	2102      	movs	r1, #2
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fecc 	bl	80035dc <ST7735_WriteData>
 8003844:	e00f      	b.n	8003866 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003846:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	733b      	strb	r3, [r7, #12]
 8003852:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003856:	b2db      	uxtb	r3, r3
 8003858:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	2102      	movs	r1, #2
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff febb 	bl	80035dc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	3301      	adds	r3, #1
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003870:	461a      	mov	r2, r3
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4293      	cmp	r3, r2
 8003876:	d3cf      	bcc.n	8003818 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3301      	adds	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003882:	461a      	mov	r2, r3
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4293      	cmp	r3, r2
 8003888:	d3b5      	bcc.n	80037f6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	3724      	adds	r7, #36	; 0x24
 8003890:	46bd      	mov	sp, r7
 8003892:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003896:	b002      	add	sp, #8
 8003898:	4770      	bx	lr

0800389a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800389a:	b082      	sub	sp, #8
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af04      	add	r7, sp, #16
 80038a2:	603a      	str	r2, [r7, #0]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	4603      	mov	r3, r0
 80038a8:	80fb      	strh	r3, [r7, #6]
 80038aa:	460b      	mov	r3, r1
 80038ac:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80038ae:	f7ff fe4f 	bl	8003550 <ST7735_Select>

    while(*str) {
 80038b2:	e02d      	b.n	8003910 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	7d3a      	ldrb	r2, [r7, #20]
 80038b8:	4413      	add	r3, r2
 80038ba:	2b7f      	cmp	r3, #127	; 0x7f
 80038bc:	dd13      	ble.n	80038e6 <ST7735_WriteString+0x4c>
            x = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80038c2:	7d7b      	ldrb	r3, [r7, #21]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	88bb      	ldrh	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80038cc:	88bb      	ldrh	r3, [r7, #4]
 80038ce:	7d7a      	ldrb	r2, [r7, #21]
 80038d0:	4413      	add	r3, r2
 80038d2:	2b9f      	cmp	r3, #159	; 0x9f
 80038d4:	dc21      	bgt.n	800391a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d103      	bne.n	80038e6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	603b      	str	r3, [r7, #0]
                continue;
 80038e4:	e014      	b.n	8003910 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	88b9      	ldrh	r1, [r7, #4]
 80038ec:	88f8      	ldrh	r0, [r7, #6]
 80038ee:	8c3b      	ldrh	r3, [r7, #32]
 80038f0:	9302      	str	r3, [sp, #8]
 80038f2:	8bbb      	ldrh	r3, [r7, #28]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f7ff ff56 	bl	80037ac <ST7735_WriteChar>
        x += font.width;
 8003900:	7d3b      	ldrb	r3, [r7, #20]
 8003902:	b29a      	uxth	r2, r3
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	4413      	add	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
        str++;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1cd      	bne.n	80038b4 <ST7735_WriteString+0x1a>
 8003918:	e000      	b.n	800391c <ST7735_WriteString+0x82>
                break;
 800391a:	bf00      	nop
    }

    ST7735_Unselect();
 800391c:	f7ff fe24 	bl	8003568 <ST7735_Unselect>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800392a:	b002      	add	sp, #8
 800392c:	4770      	bx	lr
	...

08003930 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	4604      	mov	r4, r0
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4623      	mov	r3, r4
 8003940:	80fb      	strh	r3, [r7, #6]
 8003942:	4603      	mov	r3, r0
 8003944:	80bb      	strh	r3, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	807b      	strh	r3, [r7, #2]
 800394a:	4613      	mov	r3, r2
 800394c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	2b7f      	cmp	r3, #127	; 0x7f
 8003952:	d858      	bhi.n	8003a06 <ST7735_FillRectangle+0xd6>
 8003954:	88bb      	ldrh	r3, [r7, #4]
 8003956:	2b9f      	cmp	r3, #159	; 0x9f
 8003958:	d855      	bhi.n	8003a06 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	887b      	ldrh	r3, [r7, #2]
 800395e:	4413      	add	r3, r2
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	dd03      	ble.n	800396c <ST7735_FillRectangle+0x3c>
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800396a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800396c:	88ba      	ldrh	r2, [r7, #4]
 800396e:	883b      	ldrh	r3, [r7, #0]
 8003970:	4413      	add	r3, r2
 8003972:	2ba0      	cmp	r3, #160	; 0xa0
 8003974:	dd03      	ble.n	800397e <ST7735_FillRectangle+0x4e>
 8003976:	88bb      	ldrh	r3, [r7, #4]
 8003978:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800397c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800397e:	f7ff fde7 	bl	8003550 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	b2d8      	uxtb	r0, r3
 8003986:	88bb      	ldrh	r3, [r7, #4]
 8003988:	b2d9      	uxtb	r1, r3
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4413      	add	r3, r2
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b2dc      	uxtb	r4, r3
 800399a:	88bb      	ldrh	r3, [r7, #4]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	883b      	ldrh	r3, [r7, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4622      	mov	r2, r4
 80039ac:	f7ff fe7b 	bl	80036a6 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80039b0:	8c3b      	ldrh	r3, [r7, #32]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	733b      	strb	r3, [r7, #12]
 80039ba:	8c3b      	ldrh	r3, [r7, #32]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80039c0:	2201      	movs	r2, #1
 80039c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039c6:	4812      	ldr	r0, [pc, #72]	; (8003a10 <ST7735_FillRectangle+0xe0>)
 80039c8:	f000 fd02 	bl	80043d0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80039cc:	883b      	ldrh	r3, [r7, #0]
 80039ce:	80bb      	strh	r3, [r7, #4]
 80039d0:	e013      	b.n	80039fa <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	80fb      	strh	r3, [r7, #6]
 80039d6:	e00a      	b.n	80039ee <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80039d8:	f107 010c 	add.w	r1, r7, #12
 80039dc:	f04f 33ff 	mov.w	r3, #4294967295
 80039e0:	2202      	movs	r2, #2
 80039e2:	480c      	ldr	r0, [pc, #48]	; (8003a14 <ST7735_FillRectangle+0xe4>)
 80039e4:	f001 fa0b 	bl	8004dfe <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	80fb      	strh	r3, [r7, #6]
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f1      	bne.n	80039d8 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80039f4:	88bb      	ldrh	r3, [r7, #4]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	80bb      	strh	r3, [r7, #4]
 80039fa:	88bb      	ldrh	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e8      	bne.n	80039d2 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8003a00:	f7ff fdb2 	bl	8003568 <ST7735_Unselect>
 8003a04:	e000      	b.n	8003a08 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003a06:	bf00      	nop
}
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40020400 	.word	0x40020400
 8003a14:	20000094 	.word	0x20000094

08003a18 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	23a0      	movs	r3, #160	; 0xa0
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7ff ff7f 	bl	8003930 <ST7735_FillRectangle>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8003a3a:	b590      	push	{r4, r7, lr}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4604      	mov	r4, r0
 8003a42:	4608      	mov	r0, r1
 8003a44:	4611      	mov	r1, r2
 8003a46:	461a      	mov	r2, r3
 8003a48:	4623      	mov	r3, r4
 8003a4a:	80fb      	strh	r3, [r7, #6]
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	80bb      	strh	r3, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5c:	d831      	bhi.n	8003ac2 <ST7735_DrawImage+0x88>
 8003a5e:	88bb      	ldrh	r3, [r7, #4]
 8003a60:	2b9f      	cmp	r3, #159	; 0x9f
 8003a62:	d82e      	bhi.n	8003ac2 <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	4413      	add	r3, r2
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	dc2b      	bgt.n	8003ac6 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003a6e:	88ba      	ldrh	r2, [r7, #4]
 8003a70:	883b      	ldrh	r3, [r7, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	2ba0      	cmp	r3, #160	; 0xa0
 8003a76:	dc28      	bgt.n	8003aca <ST7735_DrawImage+0x90>

    ST7735_Select();
 8003a78:	f7ff fd6a 	bl	8003550 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	b2d8      	uxtb	r0, r3
 8003a80:	88bb      	ldrh	r3, [r7, #4]
 8003a82:	b2d9      	uxtb	r1, r3
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b2dc      	uxtb	r4, r3
 8003a94:	88bb      	ldrh	r3, [r7, #4]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	883b      	ldrh	r3, [r7, #0]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	f7ff fdfe 	bl	80036a6 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	883a      	ldrh	r2, [r7, #0]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	69b8      	ldr	r0, [r7, #24]
 8003ab8:	f7ff fd90 	bl	80035dc <ST7735_WriteData>
    ST7735_Unselect();
 8003abc:	f7ff fd54 	bl	8003568 <ST7735_Unselect>
 8003ac0:	e004      	b.n	8003acc <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003aca:	bf00      	nop
}
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}
	...

08003ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_MspInit+0x4c>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <HAL_MspInit+0x4c>)
 8003ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_MspInit+0x4c>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_MspInit+0x4c>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <HAL_MspInit+0x4c>)
 8003b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_MspInit+0x4c>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b12:	2007      	movs	r0, #7
 8003b14:	f000 fa8c 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800

08003b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 0314 	add.w	r3, r7, #20
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_SPI_MspInit+0x84>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d12b      	bne.n	8003b9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	4b18      	ldr	r3, [pc, #96]	; (8003bac <HAL_SPI_MspInit+0x88>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_SPI_MspInit+0x88>)
 8003b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b54:	6453      	str	r3, [r2, #68]	; 0x44
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <HAL_SPI_MspInit+0x88>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_SPI_MspInit+0x88>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a10      	ldr	r2, [pc, #64]	; (8003bac <HAL_SPI_MspInit+0x88>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_SPI_MspInit+0x88>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003b7e:	23a0      	movs	r3, #160	; 0xa0
 8003b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b8e:	2305      	movs	r3, #5
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <HAL_SPI_MspInit+0x8c>)
 8003b9a:	f000 fa7d 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b9e:	bf00      	nop
 8003ba0:	3728      	adds	r7, #40	; 0x28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40013000 	.word	0x40013000
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40020000 	.word	0x40020000

08003bb4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_TIM_Encoder_MspInit+0x84>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d12c      	bne.n	8003c30 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_TIM_Encoder_MspInit+0x88>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_TIM_Encoder_MspInit+0x88>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6453      	str	r3, [r2, #68]	; 0x44
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_TIM_Encoder_MspInit+0x88>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_TIM_Encoder_MspInit+0x88>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_TIM_Encoder_MspInit+0x88>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6313      	str	r3, [r2, #48]	; 0x30
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_TIM_Encoder_MspInit+0x88>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c20:	2301      	movs	r3, #1
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4805      	ldr	r0, [pc, #20]	; (8003c40 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003c2c:	f000 fa34 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003c30:	bf00      	nop
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40020000 	.word	0x40020000

08003c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_UART_MspInit+0x84>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d12b      	bne.n	8003cbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <HAL_UART_MspInit+0x88>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_UART_MspInit+0x88>)
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_UART_MspInit+0x88>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_UART_MspInit+0x88>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_UART_MspInit+0x88>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_UART_MspInit+0x88>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003caa:	2303      	movs	r3, #3
 8003cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cae:	2307      	movs	r3, #7
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <HAL_UART_MspInit+0x8c>)
 8003cba:	f000 f9ed 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003cbe:	bf00      	nop
 8003cc0:	3728      	adds	r7, #40	; 0x28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40004400 	.word	0x40004400
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40020000 	.word	0x40020000

08003cd4 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd8:	f000 f8b4 	bl	8003e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <SystemInit+0x60>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <SystemInit+0x60>)
 8003cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <SystemInit+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <SystemInit+0x64>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <SystemInit+0x64>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <SystemInit+0x64>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <SystemInit+0x64>)
 8003d0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <SystemInit+0x64>)
 8003d18:	4a0b      	ldr	r2, [pc, #44]	; (8003d48 <SystemInit+0x68>)
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <SystemInit+0x64>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <SystemInit+0x64>)
 8003d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <SystemInit+0x64>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <SystemInit+0x60>)
 8003d30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d34:	609a      	str	r2, [r3, #8]
#endif
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000ed00 	.word	0xe000ed00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	24003010 	.word	0x24003010

08003d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d52:	e003      	b.n	8003d5c <LoopCopyDataInit>

08003d54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d5a:	3104      	adds	r1, #4

08003d5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d5c:	480b      	ldr	r0, [pc, #44]	; (8003d8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d64:	d3f6      	bcc.n	8003d54 <CopyDataInit>
  ldr  r2, =_sbss
 8003d66:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d68:	e002      	b.n	8003d70 <LoopFillZerobss>

08003d6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d6c:	f842 3b04 	str.w	r3, [r2], #4

08003d70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d74:	d3f9      	bcc.n	8003d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d76:	f7ff ffb3 	bl	8003ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d7a:	f001 ffa5 	bl	8005cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d7e:	f7ff fa13 	bl	80031a8 <main>
  bx  lr    
 8003d82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d88:	08017088 	.word	0x08017088
  ldr  r0, =_sdata
 8003d8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d90:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8003d94:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8003d98:	20000134 	.word	0x20000134

08003d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d9c:	e7fe      	b.n	8003d9c <ADC_IRQHandler>
	...

08003da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_Init+0x40>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <HAL_Init+0x40>)
 8003daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_Init+0x40>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_Init+0x40>)
 8003db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <HAL_Init+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <HAL_Init+0x40>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc8:	2003      	movs	r0, #3
 8003dca:	f000 f931 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f000 f808 	bl	8003de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd4:	f7ff fe7e 	bl	8003ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023c00 	.word	0x40023c00

08003de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_InitTick+0x54>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_InitTick+0x58>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	4619      	mov	r1, r3
 8003df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f93b 	bl	800407e <HAL_SYSTICK_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00e      	b.n	8003e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d80a      	bhi.n	8003e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	f000 f911 	bl	8004046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e24:	4a06      	ldr	r2, [pc, #24]	; (8003e40 <HAL_InitTick+0x5c>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000018 	.word	0x20000018
 8003e3c:	20000020 	.word	0x20000020
 8003e40:	2000001c 	.word	0x2000001c

08003e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_IncTick+0x20>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_IncTick+0x24>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <HAL_IncTick+0x24>)
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000020 	.word	0x20000020
 8003e68:	20000130 	.word	0x20000130

08003e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_GetTick+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000130 	.word	0x20000130

08003e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e8c:	f7ff ffee 	bl	8003e6c <HAL_GetTick>
 8003e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d005      	beq.n	8003eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <HAL_Delay+0x44>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eaa:	bf00      	nop
 8003eac:	f7ff ffde 	bl	8003e6c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d8f7      	bhi.n	8003eac <HAL_Delay+0x28>
  {
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000020 	.word	0x20000020

08003ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003efe:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <__NVIC_SetPriorityGrouping+0x44>)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	60d3      	str	r3, [r2, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <__NVIC_GetPriorityGrouping+0x18>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 0307 	and.w	r3, r3, #7
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db0a      	blt.n	8003f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	490c      	ldr	r1, [pc, #48]	; (8003f7c <__NVIC_SetPriority+0x4c>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	440b      	add	r3, r1
 8003f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f58:	e00a      	b.n	8003f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4908      	ldr	r1, [pc, #32]	; (8003f80 <__NVIC_SetPriority+0x50>)
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	3b04      	subs	r3, #4
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	761a      	strb	r2, [r3, #24]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e100 	.word	0xe000e100
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f1c3 0307 	rsb	r3, r3, #7
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	bf28      	it	cs
 8003fa2:	2304      	movcs	r3, #4
 8003fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d902      	bls.n	8003fb4 <NVIC_EncodePriority+0x30>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3b03      	subs	r3, #3
 8003fb2:	e000      	b.n	8003fb6 <NVIC_EncodePriority+0x32>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43d9      	mvns	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	4313      	orrs	r3, r2
         );
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	; 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ffc:	d301      	bcc.n	8004002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffe:	2301      	movs	r3, #1
 8004000:	e00f      	b.n	8004022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <SysTick_Config+0x40>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400a:	210f      	movs	r1, #15
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	f7ff ff8e 	bl	8003f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <SysTick_Config+0x40>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <SysTick_Config+0x40>)
 800401c:	2207      	movs	r2, #7
 800401e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000e010 	.word	0xe000e010

08004030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff47 	bl	8003ecc <__NVIC_SetPriorityGrouping>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004058:	f7ff ff5c 	bl	8003f14 <__NVIC_GetPriorityGrouping>
 800405c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff8e 	bl	8003f84 <NVIC_EncodePriority>
 8004068:	4602      	mov	r2, r0
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff5d 	bl	8003f30 <__NVIC_SetPriority>
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff ffb0 	bl	8003fec <SysTick_Config>
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	e159      	b.n	8004368 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b4:	2201      	movs	r2, #1
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	f040 8148 	bne.w	8004362 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d005      	beq.n	80040ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d130      	bne.n	800414c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2203      	movs	r2, #3
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004120:	2201      	movs	r2, #1
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 0201 	and.w	r2, r3, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b03      	cmp	r3, #3
 8004156:	d017      	beq.n	8004188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	2203      	movs	r2, #3
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d123      	bne.n	80041dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	08da      	lsrs	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3208      	adds	r2, #8
 800419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	220f      	movs	r2, #15
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	08da      	lsrs	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2203      	movs	r2, #3
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0203 	and.w	r2, r3, #3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a2 	beq.w	8004362 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b57      	ldr	r3, [pc, #348]	; (8004380 <HAL_GPIO_Init+0x2e8>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	4a56      	ldr	r2, [pc, #344]	; (8004380 <HAL_GPIO_Init+0x2e8>)
 8004228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422c:	6453      	str	r3, [r2, #68]	; 0x44
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_GPIO_Init+0x2e8>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423a:	4a52      	ldr	r2, [pc, #328]	; (8004384 <HAL_GPIO_Init+0x2ec>)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a49      	ldr	r2, [pc, #292]	; (8004388 <HAL_GPIO_Init+0x2f0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d019      	beq.n	800429a <HAL_GPIO_Init+0x202>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a48      	ldr	r2, [pc, #288]	; (800438c <HAL_GPIO_Init+0x2f4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_GPIO_Init+0x1fe>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a47      	ldr	r2, [pc, #284]	; (8004390 <HAL_GPIO_Init+0x2f8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00d      	beq.n	8004292 <HAL_GPIO_Init+0x1fa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a46      	ldr	r2, [pc, #280]	; (8004394 <HAL_GPIO_Init+0x2fc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <HAL_GPIO_Init+0x1f6>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a45      	ldr	r2, [pc, #276]	; (8004398 <HAL_GPIO_Init+0x300>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <HAL_GPIO_Init+0x1f2>
 8004286:	2304      	movs	r3, #4
 8004288:	e008      	b.n	800429c <HAL_GPIO_Init+0x204>
 800428a:	2307      	movs	r3, #7
 800428c:	e006      	b.n	800429c <HAL_GPIO_Init+0x204>
 800428e:	2303      	movs	r3, #3
 8004290:	e004      	b.n	800429c <HAL_GPIO_Init+0x204>
 8004292:	2302      	movs	r3, #2
 8004294:	e002      	b.n	800429c <HAL_GPIO_Init+0x204>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_GPIO_Init+0x204>
 800429a:	2300      	movs	r3, #0
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f002 0203 	and.w	r2, r2, #3
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	4093      	lsls	r3, r2
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ac:	4935      	ldr	r1, [pc, #212]	; (8004384 <HAL_GPIO_Init+0x2ec>)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	3302      	adds	r3, #2
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ba:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_GPIO_Init+0x304>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042de:	4a2f      	ldr	r2, [pc, #188]	; (800439c <HAL_GPIO_Init+0x304>)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042e4:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_GPIO_Init+0x304>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004308:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_GPIO_Init+0x304>)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <HAL_GPIO_Init+0x304>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004332:	4a1a      	ldr	r2, [pc, #104]	; (800439c <HAL_GPIO_Init+0x304>)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004338:	4b18      	ldr	r3, [pc, #96]	; (800439c <HAL_GPIO_Init+0x304>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800435c:	4a0f      	ldr	r2, [pc, #60]	; (800439c <HAL_GPIO_Init+0x304>)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3301      	adds	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b0f      	cmp	r3, #15
 800436c:	f67f aea2 	bls.w	80040b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	40013800 	.word	0x40013800
 8004388:	40020000 	.word	0x40020000
 800438c:	40020400 	.word	0x40020400
 8004390:	40020800 	.word	0x40020800
 8004394:	40020c00 	.word	0x40020c00
 8004398:	40021000 	.word	0x40021000
 800439c:	40013c00 	.word	0x40013c00

080043a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
 80043bc:	e001      	b.n	80043c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
 80043dc:	4613      	mov	r3, r2
 80043de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e0:	787b      	ldrb	r3, [r7, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043ec:	e003      	b.n	80043f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ee:	887b      	ldrh	r3, [r7, #2]
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	619a      	str	r2, [r3, #24]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e264      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d075      	beq.n	800450e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004422:	4ba3      	ldr	r3, [pc, #652]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b04      	cmp	r3, #4
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442e:	4ba0      	ldr	r3, [pc, #640]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004436:	2b08      	cmp	r3, #8
 8004438:	d112      	bne.n	8004460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443a:	4b9d      	ldr	r3, [pc, #628]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004446:	d10b      	bne.n	8004460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	4b99      	ldr	r3, [pc, #612]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d05b      	beq.n	800450c <HAL_RCC_OscConfig+0x108>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d157      	bne.n	800450c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e23f      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d106      	bne.n	8004478 <HAL_RCC_OscConfig+0x74>
 800446a:	4b91      	ldr	r3, [pc, #580]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a90      	ldr	r2, [pc, #576]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e01d      	b.n	80044b4 <HAL_RCC_OscConfig+0xb0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x98>
 8004482:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a8a      	ldr	r2, [pc, #552]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b88      	ldr	r3, [pc, #544]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a87      	ldr	r2, [pc, #540]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0xb0>
 800449c:	4b84      	ldr	r3, [pc, #528]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a83      	ldr	r2, [pc, #524]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b81      	ldr	r3, [pc, #516]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a80      	ldr	r2, [pc, #512]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7ff fcd6 	bl	8003e6c <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c4:	f7ff fcd2 	bl	8003e6c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e204      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b76      	ldr	r3, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0xc0>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7ff fcc2 	bl	8003e6c <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7ff fcbe 	bl	8003e6c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1f0      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0xe8>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d063      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800451a:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004526:	4b62      	ldr	r3, [pc, #392]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800452e:	2b08      	cmp	r3, #8
 8004530:	d11c      	bne.n	800456c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b5f      	ldr	r3, [pc, #380]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453e:	4b5c      	ldr	r3, [pc, #368]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_RCC_OscConfig+0x152>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e1c4      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	4b56      	ldr	r3, [pc, #344]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4952      	ldr	r1, [pc, #328]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	e03a      	b.n	80045e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004574:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <HAL_RCC_OscConfig+0x2b0>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7ff fc77 	bl	8003e6c <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004582:	f7ff fc73 	bl	8003e6c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1a5      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	4b46      	ldr	r3, [pc, #280]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4940      	ldr	r1, [pc, #256]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
 80045b4:	e015      	b.n	80045e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <HAL_RCC_OscConfig+0x2b0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7ff fc56 	bl	8003e6c <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c4:	f7ff fc52 	bl	8003e6c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e184      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d030      	beq.n	8004650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f6:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <HAL_RCC_OscConfig+0x2b4>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7ff fc36 	bl	8003e6c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004604:	f7ff fc32 	bl	8003e6c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e164      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x200>
 8004622:	e015      	b.n	8004650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x2b4>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7ff fc1f 	bl	8003e6c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004632:	f7ff fc1b 	bl	8003e6c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e14d      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a0 	beq.w	800479e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_OscConfig+0x2b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d121      	bne.n	80046de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCC_OscConfig+0x2b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a07      	ldr	r2, [pc, #28]	; (80046bc <HAL_RCC_OscConfig+0x2b8>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a6:	f7ff fbe1 	bl	8003e6c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	e011      	b.n	80046d2 <HAL_RCC_OscConfig+0x2ce>
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	42470000 	.word	0x42470000
 80046b8:	42470e80 	.word	0x42470e80
 80046bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7ff fbd4 	bl	8003e6c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e106      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_RCC_OscConfig+0x4e4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d106      	bne.n	80046f4 <HAL_RCC_OscConfig+0x2f0>
 80046e6:	4b81      	ldr	r3, [pc, #516]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a80      	ldr	r2, [pc, #512]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	e01c      	b.n	800472e <HAL_RCC_OscConfig+0x32a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_OscConfig+0x312>
 80046fc:	4b7b      	ldr	r3, [pc, #492]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a7a      	ldr	r2, [pc, #488]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	4b78      	ldr	r3, [pc, #480]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a77      	ldr	r2, [pc, #476]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	e00b      	b.n	800472e <HAL_RCC_OscConfig+0x32a>
 8004716:	4b75      	ldr	r3, [pc, #468]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a74      	ldr	r2, [pc, #464]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	4b72      	ldr	r3, [pc, #456]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a71      	ldr	r2, [pc, #452]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d015      	beq.n	8004762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004736:	f7ff fb99 	bl	8003e6c <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473c:	e00a      	b.n	8004754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473e:	f7ff fb95 	bl	8003e6c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e0c5      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	4b65      	ldr	r3, [pc, #404]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ee      	beq.n	800473e <HAL_RCC_OscConfig+0x33a>
 8004760:	e014      	b.n	800478c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004762:	f7ff fb83 	bl	8003e6c <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7ff fb7f 	bl	8003e6c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e0af      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004780:	4b5a      	ldr	r3, [pc, #360]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ee      	bne.n	800476a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4b56      	ldr	r3, [pc, #344]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a55      	ldr	r2, [pc, #340]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 809b 	beq.w	80048de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a8:	4b50      	ldr	r3, [pc, #320]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d05c      	beq.n	800486e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d141      	bne.n	8004840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047bc:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <HAL_RCC_OscConfig+0x4ec>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7ff fb53 	bl	8003e6c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ca:	f7ff fb4f 	bl	8003e6c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e081      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047dc:	4b43      	ldr	r3, [pc, #268]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f0      	bne.n	80047ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	019b      	lsls	r3, r3, #6
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	061b      	lsls	r3, r3, #24
 800480c:	4937      	ldr	r1, [pc, #220]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCC_OscConfig+0x4ec>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7ff fb28 	bl	8003e6c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004820:	f7ff fb24 	bl	8003e6c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e056      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x41c>
 800483e:	e04e      	b.n	80048de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCC_OscConfig+0x4ec>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7ff fb11 	bl	8003e6c <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484e:	f7ff fb0d 	bl	8003e6c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e03f      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0x44a>
 800486c:	e037      	b.n	80048de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e032      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800487a:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d028      	beq.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d121      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d11a      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048aa:	4013      	ands	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	3b01      	subs	r3, #1
 80048c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d107      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40007000 	.word	0x40007000
 80048ec:	40023800 	.word	0x40023800
 80048f0:	42470060 	.word	0x42470060

080048f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0cc      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004908:	4b68      	ldr	r3, [pc, #416]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d90c      	bls.n	8004930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0b8      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d020      	beq.n	800497e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a58      	ldr	r2, [pc, #352]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a52      	ldr	r2, [pc, #328]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800496a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800496c:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	494d      	ldr	r1, [pc, #308]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d044      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d119      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e07f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c2:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e067      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d2:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 0203 	bic.w	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4934      	ldr	r1, [pc, #208]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e4:	f7ff fa42 	bl	8003e6c <HAL_GetTick>
 80049e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ec:	f7ff fa3e 	bl	8003e6c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e04f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 020c 	and.w	r2, r3, #12
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d1eb      	bne.n	80049ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d20c      	bcs.n	8004a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e032      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4916      	ldr	r1, [pc, #88]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a7a:	f000 f821 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	490a      	ldr	r1, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	5ccb      	ldrb	r3, [r1, r3]
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f9a2 	bl	8003de4 <HAL_InitTick>

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	08017038 	.word	0x08017038
 8004ab8:	20000018 	.word	0x20000018
 8004abc:	2000001c 	.word	0x2000001c

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad8:	4b67      	ldr	r3, [pc, #412]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d00d      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x40>
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	f200 80bd 	bhi.w	8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x34>
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d003      	beq.n	8004afa <HAL_RCC_GetSysClockFreq+0x3a>
 8004af2:	e0b7      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004af6:	60bb      	str	r3, [r7, #8]
       break;
 8004af8:	e0b7      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004afa:	4b61      	ldr	r3, [pc, #388]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004afc:	60bb      	str	r3, [r7, #8]
      break;
 8004afe:	e0b4      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b00:	4b5d      	ldr	r3, [pc, #372]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b0a:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04d      	beq.n	8004bb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b16:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	099b      	lsrs	r3, r3, #6
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	ea02 0800 	and.w	r8, r2, r0
 8004b2e:	ea03 0901 	and.w	r9, r3, r1
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	014b      	lsls	r3, r1, #5
 8004b40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b44:	0142      	lsls	r2, r0, #5
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	ebb0 0008 	subs.w	r0, r0, r8
 8004b4e:	eb61 0109 	sbc.w	r1, r1, r9
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	018b      	lsls	r3, r1, #6
 8004b5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b60:	0182      	lsls	r2, r0, #6
 8004b62:	1a12      	subs	r2, r2, r0
 8004b64:	eb63 0301 	sbc.w	r3, r3, r1
 8004b68:	f04f 0000 	mov.w	r0, #0
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	00d9      	lsls	r1, r3, #3
 8004b72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b76:	00d0      	lsls	r0, r2, #3
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	eb12 0208 	adds.w	r2, r2, r8
 8004b80:	eb43 0309 	adc.w	r3, r3, r9
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f04f 0100 	mov.w	r1, #0
 8004b8c:	0259      	lsls	r1, r3, #9
 8004b8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b92:	0250      	lsls	r0, r2, #9
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	f7fb fb18 	bl	80001d8 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e04a      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb2:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	ea02 0400 	and.w	r4, r2, r0
 8004bca:	ea03 0501 	and.w	r5, r3, r1
 8004bce:	4620      	mov	r0, r4
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	014b      	lsls	r3, r1, #5
 8004bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004be0:	0142      	lsls	r2, r0, #5
 8004be2:	4610      	mov	r0, r2
 8004be4:	4619      	mov	r1, r3
 8004be6:	1b00      	subs	r0, r0, r4
 8004be8:	eb61 0105 	sbc.w	r1, r1, r5
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	018b      	lsls	r3, r1, #6
 8004bf6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bfa:	0182      	lsls	r2, r0, #6
 8004bfc:	1a12      	subs	r2, r2, r0
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	00d9      	lsls	r1, r3, #3
 8004c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c10:	00d0      	lsls	r0, r2, #3
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	1912      	adds	r2, r2, r4
 8004c18:	eb45 0303 	adc.w	r3, r5, r3
 8004c1c:	f04f 0000 	mov.w	r0, #0
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	0299      	lsls	r1, r3, #10
 8004c26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c2a:	0290      	lsls	r0, r2, #10
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	f7fb facc 	bl	80001d8 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	3301      	adds	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	60bb      	str	r3, [r7, #8]
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c66:	60bb      	str	r3, [r7, #8]
      break;
 8004c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	00f42400 	.word	0x00f42400
 8004c80:	007a1200 	.word	0x007a1200

08004c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c88:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000018 	.word	0x20000018

08004c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca0:	f7ff fff0 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	0a9b      	lsrs	r3, r3, #10
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4903      	ldr	r1, [pc, #12]	; (8004cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	08017048 	.word	0x08017048

08004cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cc8:	f7ff ffdc 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0b5b      	lsrs	r3, r3, #13
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4903      	ldr	r1, [pc, #12]	; (8004ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	08017048 	.word	0x08017048

08004cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e07b      	b.n	8004df6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0e:	d009      	beq.n	8004d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	61da      	str	r2, [r3, #28]
 8004d16:	e005      	b.n	8004d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fe fef0 	bl	8003b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	ea42 0103 	orr.w	r1, r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	f003 0104 	and.w	r1, r3, #4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0210 	and.w	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b088      	sub	sp, #32
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_SPI_Transmit+0x22>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e126      	b.n	800506e <HAL_SPI_Transmit+0x270>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e28:	f7ff f820 	bl	8003e6c <HAL_GetTick>
 8004e2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e42:	e10b      	b.n	800505c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Transmit+0x52>
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e54:	e102      	b.n	800505c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	88fa      	ldrh	r2, [r7, #6]
 8004e6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9c:	d10f      	bne.n	8004ebe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ebc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d007      	beq.n	8004edc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee4:	d14b      	bne.n	8004f7e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_SPI_Transmit+0xf6>
 8004eee:	8afb      	ldrh	r3, [r7, #22]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d13e      	bne.n	8004f72 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f18:	e02b      	b.n	8004f72 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d112      	bne.n	8004f4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	881a      	ldrh	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	1c9a      	adds	r2, r3, #2
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f4c:	e011      	b.n	8004f72 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4e:	f7fe ff8d 	bl	8003e6c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d803      	bhi.n	8004f66 <HAL_SPI_Transmit+0x168>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d102      	bne.n	8004f6c <HAL_SPI_Transmit+0x16e>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f70:	e074      	b.n	800505c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1ce      	bne.n	8004f1a <HAL_SPI_Transmit+0x11c>
 8004f7c:	e04c      	b.n	8005018 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_SPI_Transmit+0x18e>
 8004f86:	8afb      	ldrh	r3, [r7, #22]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d140      	bne.n	800500e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fb2:	e02c      	b.n	800500e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d113      	bne.n	8004fea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	7812      	ldrb	r2, [r2, #0]
 8004fce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fe8:	e011      	b.n	800500e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fea:	f7fe ff3f 	bl	8003e6c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d803      	bhi.n	8005002 <HAL_SPI_Transmit+0x204>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d102      	bne.n	8005008 <HAL_SPI_Transmit+0x20a>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800500c:	e026      	b.n	800505c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1cd      	bne.n	8004fb4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f8b3 	bl	8005188 <SPI_EndRxTxTransaction>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e000      	b.n	800505c <HAL_SPI_Transmit+0x25e>
  }

error:
 800505a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800506c:	7ffb      	ldrb	r3, [r7, #31]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005088:	f7fe fef0 	bl	8003e6c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	4413      	add	r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005098:	f7fe fee8 	bl	8003e6c <HAL_GetTick>
 800509c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509e:	4b39      	ldr	r3, [pc, #228]	; (8005184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	015b      	lsls	r3, r3, #5
 80050a4:	0d1b      	lsrs	r3, r3, #20
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ae:	e054      	b.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d050      	beq.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b8:	f7fe fed8 	bl	8003e6c <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d902      	bls.n	80050ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d13d      	bne.n	800514a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e6:	d111      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f0:	d004      	beq.n	80050fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d107      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d10f      	bne.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e017      	b.n	800517a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	429a      	cmp	r2, r3
 8005176:	d19b      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000018 	.word	0x20000018

08005188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005194:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <SPI_EndRxTxTransaction+0x7c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <SPI_EndRxTxTransaction+0x80>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	0d5b      	lsrs	r3, r3, #21
 80051a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051a4:	fb02 f303 	mul.w	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b2:	d112      	bne.n	80051da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	2180      	movs	r1, #128	; 0x80
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff ff5a 	bl	8005078 <SPI_WaitFlagStateUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e00f      	b.n	80051fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d0f2      	beq.n	80051da <SPI_EndRxTxTransaction+0x52>
 80051f4:	e000      	b.n	80051f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80051f6:	bf00      	nop
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000018 	.word	0x20000018
 8005208:	165e9f81 	.word	0x165e9f81

0800520c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e097      	b.n	8005350 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fe fcbd 	bl	8003bb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005250:	f023 0307 	bic.w	r3, r3, #7
 8005254:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f000 f907 	bl	8005474 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	4313      	orrs	r3, r2
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052ac:	f023 030c 	bic.w	r3, r3, #12
 80052b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	4313      	orrs	r3, r2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	011a      	lsls	r2, r3, #4
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	031b      	lsls	r3, r3, #12
 80052dc:	4313      	orrs	r3, r2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	4313      	orrs	r3, r2
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005368:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005370:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005378:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005380:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d110      	bne.n	80053aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d102      	bne.n	8005394 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800538e:	7b7b      	ldrb	r3, [r7, #13]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d001      	beq.n	8005398 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e069      	b.n	800546c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a8:	e031      	b.n	800540e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d110      	bne.n	80053d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d102      	bne.n	80053bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053b6:	7b3b      	ldrb	r3, [r7, #12]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d001      	beq.n	80053c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e055      	b.n	800546c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053d0:	e01d      	b.n	800540e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d108      	bne.n	80053ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053de:	7b7b      	ldrb	r3, [r7, #13]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d102      	bne.n	80053ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053e4:	7b3b      	ldrb	r3, [r7, #12]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d001      	beq.n	80053ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e03e      	b.n	800546c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_TIM_Encoder_Start+0xc4>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d008      	beq.n	800542c <HAL_TIM_Encoder_Start+0xd4>
 800541a:	e00f      	b.n	800543c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f8a5 	bl	8005574 <TIM_CCxChannelCmd>
      break;
 800542a:	e016      	b.n	800545a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2201      	movs	r2, #1
 8005432:	2104      	movs	r1, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f89d 	bl	8005574 <TIM_CCxChannelCmd>
      break;
 800543a:	e00e      	b.n	800545a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2201      	movs	r2, #1
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f895 	bl	8005574 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	2104      	movs	r1, #4
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f88e 	bl	8005574 <TIM_CCxChannelCmd>
      break;
 8005458:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a34      	ldr	r2, [pc, #208]	; (8005558 <TIM_Base_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00f      	beq.n	80054ac <TIM_Base_SetConfig+0x38>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005492:	d00b      	beq.n	80054ac <TIM_Base_SetConfig+0x38>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a31      	ldr	r2, [pc, #196]	; (800555c <TIM_Base_SetConfig+0xe8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0x38>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a30      	ldr	r2, [pc, #192]	; (8005560 <TIM_Base_SetConfig+0xec>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x38>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2f      	ldr	r2, [pc, #188]	; (8005564 <TIM_Base_SetConfig+0xf0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d108      	bne.n	80054be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <TIM_Base_SetConfig+0xe4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01b      	beq.n	80054fe <TIM_Base_SetConfig+0x8a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d017      	beq.n	80054fe <TIM_Base_SetConfig+0x8a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a22      	ldr	r2, [pc, #136]	; (800555c <TIM_Base_SetConfig+0xe8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <TIM_Base_SetConfig+0x8a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a21      	ldr	r2, [pc, #132]	; (8005560 <TIM_Base_SetConfig+0xec>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00f      	beq.n	80054fe <TIM_Base_SetConfig+0x8a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a20      	ldr	r2, [pc, #128]	; (8005564 <TIM_Base_SetConfig+0xf0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <TIM_Base_SetConfig+0x8a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <TIM_Base_SetConfig+0xf4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <TIM_Base_SetConfig+0x8a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <TIM_Base_SetConfig+0xf8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_Base_SetConfig+0x8a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <TIM_Base_SetConfig+0xfc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d108      	bne.n	8005510 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a08      	ldr	r2, [pc, #32]	; (8005558 <TIM_Base_SetConfig+0xe4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d103      	bne.n	8005544 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	615a      	str	r2, [r3, #20]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40014000 	.word	0x40014000
 800556c:	40014400 	.word	0x40014400
 8005570:	40014800 	.word	0x40014800

08005574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	2201      	movs	r2, #1
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	43db      	mvns	r3, r3
 8005596:	401a      	ands	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	431a      	orrs	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e050      	b.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d018      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d013      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00e      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a16      	ldr	r2, [pc, #88]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d009      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10c      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40014000 	.word	0x40014000

0800569c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e03f      	b.n	800572e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fe fabe 	bl	8003c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2224      	movs	r2, #36	; 0x24
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f929 	bl	8005938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b08a      	sub	sp, #40	; 0x28
 800573a:	af02      	add	r7, sp, #8
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	d17c      	bne.n	8005850 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_UART_Transmit+0x2c>
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e075      	b.n	8005852 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_UART_Transmit+0x3e>
 8005770:	2302      	movs	r3, #2
 8005772:	e06e      	b.n	8005852 <HAL_UART_Transmit+0x11c>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2221      	movs	r2, #33	; 0x21
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578a:	f7fe fb6f 	bl	8003e6c <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	88fa      	ldrh	r2, [r7, #6]
 800579a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a4:	d108      	bne.n	80057b8 <HAL_UART_Transmit+0x82>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e003      	b.n	80057c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057c8:	e02a      	b.n	8005820 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2200      	movs	r2, #0
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f840 	bl	800585a <UART_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e036      	b.n	8005852 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	3302      	adds	r3, #2
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	e007      	b.n	8005812 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	781a      	ldrb	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1cf      	bne.n	80057ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	2140      	movs	r1, #64	; 0x40
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f810 	bl	800585a <UART_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e006      	b.n	8005852 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	e000      	b.n	8005852 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005850:	2302      	movs	r3, #2
  }
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b090      	sub	sp, #64	; 0x40
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586a:	e050      	b.n	800590e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d04c      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <UART_WaitOnFlagUntilTimeout+0x30>
 800587a:	f7fe faf7 	bl	8003e6c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005886:	429a      	cmp	r2, r3
 8005888:	d241      	bcs.n	800590e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058aa:	637a      	str	r2, [r7, #52]	; 0x34
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058de:	623a      	str	r2, [r7, #32]
 80058e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	69f9      	ldr	r1, [r7, #28]
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e00f      	b.n	800592e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4013      	ands	r3, r2
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	bf0c      	ite	eq
 800591e:	2301      	moveq	r3, #1
 8005920:	2300      	movne	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	429a      	cmp	r2, r3
 800592a:	d09f      	beq.n	800586c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3740      	adds	r7, #64	; 0x40
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	b09f      	sub	sp, #124	; 0x7c
 800593e:	af00      	add	r7, sp, #0
 8005940:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800594c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594e:	68d9      	ldr	r1, [r3, #12]
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	ea40 0301 	orr.w	r3, r0, r1
 8005958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800595a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	431a      	orrs	r2, r3
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	431a      	orrs	r2, r3
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	4313      	orrs	r3, r2
 8005970:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800597c:	f021 010c 	bic.w	r1, r1, #12
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005986:	430b      	orrs	r3, r1
 8005988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800598a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005996:	6999      	ldr	r1, [r3, #24]
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	ea40 0301 	orr.w	r3, r0, r1
 80059a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4bc5      	ldr	r3, [pc, #788]	; (8005cbc <UART_SetConfig+0x384>)
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d004      	beq.n	80059b6 <UART_SetConfig+0x7e>
 80059ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4bc3      	ldr	r3, [pc, #780]	; (8005cc0 <UART_SetConfig+0x388>)
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d103      	bne.n	80059be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059b6:	f7ff f985 	bl	8004cc4 <HAL_RCC_GetPCLK2Freq>
 80059ba:	6778      	str	r0, [r7, #116]	; 0x74
 80059bc:	e002      	b.n	80059c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059be:	f7ff f96d 	bl	8004c9c <HAL_RCC_GetPCLK1Freq>
 80059c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059cc:	f040 80b6 	bne.w	8005b3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d2:	461c      	mov	r4, r3
 80059d4:	f04f 0500 	mov.w	r5, #0
 80059d8:	4622      	mov	r2, r4
 80059da:	462b      	mov	r3, r5
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	6439      	str	r1, [r7, #64]	; 0x40
 80059e0:	415b      	adcs	r3, r3
 80059e2:	647b      	str	r3, [r7, #68]	; 0x44
 80059e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059e8:	1912      	adds	r2, r2, r4
 80059ea:	eb45 0303 	adc.w	r3, r5, r3
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	00d9      	lsls	r1, r3, #3
 80059f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059fc:	00d0      	lsls	r0, r2, #3
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	1911      	adds	r1, r2, r4
 8005a04:	6639      	str	r1, [r7, #96]	; 0x60
 8005a06:	416b      	adcs	r3, r5
 8005a08:	667b      	str	r3, [r7, #100]	; 0x64
 8005a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a24:	f7fa fbd8 	bl	80001d8 <__aeabi_uldivmod>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4ba5      	ldr	r3, [pc, #660]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	011e      	lsls	r6, r3, #4
 8005a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a38:	461c      	mov	r4, r3
 8005a3a:	f04f 0500 	mov.w	r5, #0
 8005a3e:	4622      	mov	r2, r4
 8005a40:	462b      	mov	r3, r5
 8005a42:	1891      	adds	r1, r2, r2
 8005a44:	6339      	str	r1, [r7, #48]	; 0x30
 8005a46:	415b      	adcs	r3, r3
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a4e:	1912      	adds	r2, r2, r4
 8005a50:	eb45 0303 	adc.w	r3, r5, r3
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	00d9      	lsls	r1, r3, #3
 8005a5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a62:	00d0      	lsls	r0, r2, #3
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	1911      	adds	r1, r2, r4
 8005a6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a6c:	416b      	adcs	r3, r5
 8005a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	1891      	adds	r1, r2, r2
 8005a7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a7e:	415b      	adcs	r3, r3
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a8a:	f7fa fba5 	bl	80001d8 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b8c      	ldr	r3, [pc, #560]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	; 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a87      	ldr	r2, [pc, #540]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ab4:	441e      	add	r6, r3
 8005ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	1894      	adds	r4, r2, r2
 8005ac4:	623c      	str	r4, [r7, #32]
 8005ac6:	415b      	adcs	r3, r3
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ace:	1812      	adds	r2, r2, r0
 8005ad0:	eb41 0303 	adc.w	r3, r1, r3
 8005ad4:	f04f 0400 	mov.w	r4, #0
 8005ad8:	f04f 0500 	mov.w	r5, #0
 8005adc:	00dd      	lsls	r5, r3, #3
 8005ade:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ae2:	00d4      	lsls	r4, r2, #3
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	1814      	adds	r4, r2, r0
 8005aea:	653c      	str	r4, [r7, #80]	; 0x50
 8005aec:	414b      	adcs	r3, r1
 8005aee:	657b      	str	r3, [r7, #84]	; 0x54
 8005af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	1891      	adds	r1, r2, r2
 8005afc:	61b9      	str	r1, [r7, #24]
 8005afe:	415b      	adcs	r3, r3
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b0a:	f7fa fb65 	bl	80001d8 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	; 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3332      	adds	r3, #50	; 0x32
 8005b26:	4a67      	ldr	r2, [pc, #412]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 0207 	and.w	r2, r3, #7
 8005b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4432      	add	r2, r6
 8005b38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b3a:	e0b9      	b.n	8005cb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b3e:	461c      	mov	r4, r3
 8005b40:	f04f 0500 	mov.w	r5, #0
 8005b44:	4622      	mov	r2, r4
 8005b46:	462b      	mov	r3, r5
 8005b48:	1891      	adds	r1, r2, r2
 8005b4a:	6139      	str	r1, [r7, #16]
 8005b4c:	415b      	adcs	r3, r3
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b54:	1912      	adds	r2, r2, r4
 8005b56:	eb45 0303 	adc.w	r3, r5, r3
 8005b5a:	f04f 0000 	mov.w	r0, #0
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	00d9      	lsls	r1, r3, #3
 8005b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b68:	00d0      	lsls	r0, r2, #3
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	eb12 0804 	adds.w	r8, r2, r4
 8005b72:	eb43 0905 	adc.w	r9, r3, r5
 8005b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	008b      	lsls	r3, r1, #2
 8005b8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b8e:	0082      	lsls	r2, r0, #2
 8005b90:	4640      	mov	r0, r8
 8005b92:	4649      	mov	r1, r9
 8005b94:	f7fa fb20 	bl	80001d8 <__aeabi_uldivmod>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4b49      	ldr	r3, [pc, #292]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	011e      	lsls	r6, r3, #4
 8005ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	1894      	adds	r4, r2, r2
 8005bb4:	60bc      	str	r4, [r7, #8]
 8005bb6:	415b      	adcs	r3, r3
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bbe:	1812      	adds	r2, r2, r0
 8005bc0:	eb41 0303 	adc.w	r3, r1, r3
 8005bc4:	f04f 0400 	mov.w	r4, #0
 8005bc8:	f04f 0500 	mov.w	r5, #0
 8005bcc:	00dd      	lsls	r5, r3, #3
 8005bce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bd2:	00d4      	lsls	r4, r2, #3
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	1814      	adds	r4, r2, r0
 8005bda:	64bc      	str	r4, [r7, #72]	; 0x48
 8005bdc:	414b      	adcs	r3, r1
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	008b      	lsls	r3, r1, #2
 8005bf4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bf8:	0082      	lsls	r2, r0, #2
 8005bfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005bfe:	f7fa faeb 	bl	80001d8 <__aeabi_uldivmod>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005c08:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	2164      	movs	r1, #100	; 0x64
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	3332      	adds	r3, #50	; 0x32
 8005c1a:	4a2a      	ldr	r2, [pc, #168]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c26:	441e      	add	r6, r3
 8005c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	1894      	adds	r4, r2, r2
 8005c36:	603c      	str	r4, [r7, #0]
 8005c38:	415b      	adcs	r3, r3
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c40:	1812      	adds	r2, r2, r0
 8005c42:	eb41 0303 	adc.w	r3, r1, r3
 8005c46:	f04f 0400 	mov.w	r4, #0
 8005c4a:	f04f 0500 	mov.w	r5, #0
 8005c4e:	00dd      	lsls	r5, r3, #3
 8005c50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c54:	00d4      	lsls	r4, r2, #3
 8005c56:	4622      	mov	r2, r4
 8005c58:	462b      	mov	r3, r5
 8005c5a:	eb12 0a00 	adds.w	sl, r2, r0
 8005c5e:	eb43 0b01 	adc.w	fp, r3, r1
 8005c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f04f 0100 	mov.w	r1, #0
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	008b      	lsls	r3, r1, #2
 8005c76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c7a:	0082      	lsls	r2, r0, #2
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	f7fa faaa 	bl	80001d8 <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	2164      	movs	r1, #100	; 0x64
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	3332      	adds	r3, #50	; 0x32
 8005c9c:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <UART_SetConfig+0x38c>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	f003 020f 	and.w	r2, r3, #15
 8005ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4432      	add	r2, r6
 8005cae:	609a      	str	r2, [r3, #8]
}
 8005cb0:	bf00      	nop
 8005cb2:	377c      	adds	r7, #124	; 0x7c
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cba:	bf00      	nop
 8005cbc:	40011000 	.word	0x40011000
 8005cc0:	40011400 	.word	0x40011400
 8005cc4:	51eb851f 	.word	0x51eb851f

08005cc8 <__libc_init_array>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4d0d      	ldr	r5, [pc, #52]	; (8005d00 <__libc_init_array+0x38>)
 8005ccc:	4c0d      	ldr	r4, [pc, #52]	; (8005d04 <__libc_init_array+0x3c>)
 8005cce:	1b64      	subs	r4, r4, r5
 8005cd0:	10a4      	asrs	r4, r4, #2
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	42a6      	cmp	r6, r4
 8005cd6:	d109      	bne.n	8005cec <__libc_init_array+0x24>
 8005cd8:	4d0b      	ldr	r5, [pc, #44]	; (8005d08 <__libc_init_array+0x40>)
 8005cda:	4c0c      	ldr	r4, [pc, #48]	; (8005d0c <__libc_init_array+0x44>)
 8005cdc:	f000 f88a 	bl	8005df4 <_init>
 8005ce0:	1b64      	subs	r4, r4, r5
 8005ce2:	10a4      	asrs	r4, r4, #2
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	42a6      	cmp	r6, r4
 8005ce8:	d105      	bne.n	8005cf6 <__libc_init_array+0x2e>
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf0:	4798      	blx	r3
 8005cf2:	3601      	adds	r6, #1
 8005cf4:	e7ee      	b.n	8005cd4 <__libc_init_array+0xc>
 8005cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfa:	4798      	blx	r3
 8005cfc:	3601      	adds	r6, #1
 8005cfe:	e7f2      	b.n	8005ce6 <__libc_init_array+0x1e>
 8005d00:	08017080 	.word	0x08017080
 8005d04:	08017080 	.word	0x08017080
 8005d08:	08017080 	.word	0x08017080
 8005d0c:	08017084 	.word	0x08017084

08005d10 <__itoa>:
 8005d10:	1e93      	subs	r3, r2, #2
 8005d12:	2b22      	cmp	r3, #34	; 0x22
 8005d14:	b510      	push	{r4, lr}
 8005d16:	460c      	mov	r4, r1
 8005d18:	d904      	bls.n	8005d24 <__itoa+0x14>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	700b      	strb	r3, [r1, #0]
 8005d1e:	461c      	mov	r4, r3
 8005d20:	4620      	mov	r0, r4
 8005d22:	bd10      	pop	{r4, pc}
 8005d24:	2a0a      	cmp	r2, #10
 8005d26:	d109      	bne.n	8005d3c <__itoa+0x2c>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	da07      	bge.n	8005d3c <__itoa+0x2c>
 8005d2c:	232d      	movs	r3, #45	; 0x2d
 8005d2e:	700b      	strb	r3, [r1, #0]
 8005d30:	4240      	negs	r0, r0
 8005d32:	2101      	movs	r1, #1
 8005d34:	4421      	add	r1, r4
 8005d36:	f000 f81b 	bl	8005d70 <__utoa>
 8005d3a:	e7f1      	b.n	8005d20 <__itoa+0x10>
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	e7f9      	b.n	8005d34 <__itoa+0x24>

08005d40 <itoa>:
 8005d40:	f7ff bfe6 	b.w	8005d10 <__itoa>

08005d44 <memcpy>:
 8005d44:	440a      	add	r2, r1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d4c:	d100      	bne.n	8005d50 <memcpy+0xc>
 8005d4e:	4770      	bx	lr
 8005d50:	b510      	push	{r4, lr}
 8005d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d5a:	4291      	cmp	r1, r2
 8005d5c:	d1f9      	bne.n	8005d52 <memcpy+0xe>
 8005d5e:	bd10      	pop	{r4, pc}

08005d60 <memset>:
 8005d60:	4402      	add	r2, r0
 8005d62:	4603      	mov	r3, r0
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d100      	bne.n	8005d6a <memset+0xa>
 8005d68:	4770      	bx	lr
 8005d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6e:	e7f9      	b.n	8005d64 <memset+0x4>

08005d70 <__utoa>:
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	4c1f      	ldr	r4, [pc, #124]	; (8005df0 <__utoa+0x80>)
 8005d74:	b08b      	sub	sp, #44	; 0x2c
 8005d76:	4605      	mov	r5, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	466e      	mov	r6, sp
 8005d7c:	f104 0c20 	add.w	ip, r4, #32
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	6861      	ldr	r1, [r4, #4]
 8005d84:	4637      	mov	r7, r6
 8005d86:	c703      	stmia	r7!, {r0, r1}
 8005d88:	3408      	adds	r4, #8
 8005d8a:	4564      	cmp	r4, ip
 8005d8c:	463e      	mov	r6, r7
 8005d8e:	d1f7      	bne.n	8005d80 <__utoa+0x10>
 8005d90:	7921      	ldrb	r1, [r4, #4]
 8005d92:	7139      	strb	r1, [r7, #4]
 8005d94:	1e91      	subs	r1, r2, #2
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	6038      	str	r0, [r7, #0]
 8005d9a:	2922      	cmp	r1, #34	; 0x22
 8005d9c:	f04f 0100 	mov.w	r1, #0
 8005da0:	d904      	bls.n	8005dac <__utoa+0x3c>
 8005da2:	7019      	strb	r1, [r3, #0]
 8005da4:	460b      	mov	r3, r1
 8005da6:	4618      	mov	r0, r3
 8005da8:	b00b      	add	sp, #44	; 0x2c
 8005daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dac:	1e58      	subs	r0, r3, #1
 8005dae:	4684      	mov	ip, r0
 8005db0:	fbb5 f7f2 	udiv	r7, r5, r2
 8005db4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005db8:	fb02 5617 	mls	r6, r2, r7, r5
 8005dbc:	4476      	add	r6, lr
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005dc4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005dc8:	462e      	mov	r6, r5
 8005dca:	42b2      	cmp	r2, r6
 8005dcc:	f101 0101 	add.w	r1, r1, #1
 8005dd0:	463d      	mov	r5, r7
 8005dd2:	d9ed      	bls.n	8005db0 <__utoa+0x40>
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	545a      	strb	r2, [r3, r1]
 8005dd8:	1919      	adds	r1, r3, r4
 8005dda:	1aa5      	subs	r5, r4, r2
 8005ddc:	42aa      	cmp	r2, r5
 8005dde:	dae2      	bge.n	8005da6 <__utoa+0x36>
 8005de0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005de4:	780e      	ldrb	r6, [r1, #0]
 8005de6:	7006      	strb	r6, [r0, #0]
 8005de8:	3201      	adds	r2, #1
 8005dea:	f801 5901 	strb.w	r5, [r1], #-1
 8005dee:	e7f4      	b.n	8005dda <__utoa+0x6a>
 8005df0:	08017050 	.word	0x08017050

08005df4 <_init>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr

08005e00 <_fini>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr
